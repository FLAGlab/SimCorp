
1
  %retval = alloca i32, align 4
  %n = alloca i64, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %k = alloca i64, align 8
  %x = alloca i64, align 8
  %y = alloca i64, align 8
  %l = alloca i64, align 8
  %r = alloca i64, align 8
  %max = alloca i64, align 8
  %size = alloca i64, align 8
  %saved_stack = alloca i8*
  %left = alloca [100001 x i64], align 16
  %right = alloca [100001 x i64], align 16
  %cleanup.dest.slot = alloca i32
  store i32 0, i32* %retval
  %call = call %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* @_ZSt3cin, i64* %n)
  %0 = load i64* %n, align 8
  %1 = call i8* @llvm.stacksave()
  store i8* %1, i8** %saved_stack
  %vla = alloca i64, i64 %0, align 16
  store i64 0, i64* %i, align 8
  br label %for.cond

2
  %2 = load i64* %i, align 8
  %cmp = icmp slt i64 %2, 100001
  br i1 %cmp, label %for.body, label %for.end

3
  %3 = load i64* %i, align 8
  %arrayidx = getelementptr inbounds [100001 x i64]* %right, i32 0, i64 %3
  store i64 -1, i64* %arrayidx, align 8
  %4 = load i64* %i, align 8
  %arrayidx1 = getelementptr inbounds [100001 x i64]* %left, i32 0, i64 %4
  store i64 -1, i64* %arrayidx1, align 8
  %5 = load i64* %i, align 8
  %inc = add nsw i64 %5, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

4
  store i64 0, i64* %i, align 8
  br label %for.cond2

5
  %6 = load i64* %i, align 8
  %7 = load i64* %n, align 8
  %cmp3 = icmp slt i64 %6, %7
  br i1 %cmp3, label %for.body4, label %for.end17

6
  %8 = load i64* %i, align 8
  %arrayidx5 = getelementptr inbounds i64* %vla, i64 %8
  %call6 = call %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* @_ZSt3cin, i64* %arrayidx5)
  %9 = load i64* %i, align 8
  %arrayidx7 = getelementptr inbounds i64* %vla, i64 %9
  %10 = load i64* %arrayidx7, align 8
  %arrayidx8 = getelementptr inbounds [100001 x i64]* @freq, i32 0, i64 %10
  %11 = load i64* %arrayidx8, align 8
  %inc9 = add nsw i64 %11, 1
  store i64 %inc9, i64* %arrayidx8, align 8
  %12 = load i64* %i, align 8
  %arrayidx10 = getelementptr inbounds i64* %vla, i64 %12
  %13 = load i64* %arrayidx10, align 8
  %arrayidx11 = getelementptr inbounds [100001 x i64]* %left, i32 0, i64 %13
  %14 = load i64* %arrayidx11, align 8
  %cmp12 = icmp eq i64 %14, -1
  br i1 %cmp12, label %if.then, label %if.end

7
  %15 = load i64* %i, align 8
  %16 = load i64* %i, align 8
  %arrayidx13 = getelementptr inbounds i64* %vla, i64 %16
  %17 = load i64* %arrayidx13, align 8
  %arrayidx14 = getelementptr inbounds [100001 x i64]* %left, i32 0, i64 %17
  store i64 %15, i64* %arrayidx14, align 8
  br label %if.end

8
  %18 = load i64* %i, align 8
  %inc16 = add nsw i64 %18, 1
  store i64 %inc16, i64* %i, align 8
  br label %for.cond2

9
  %19 = load i64* %n, align 8
  %sub = sub nsw i64 %19, 1
  store i64 %sub, i64* %i, align 8
  br label %for.cond18

10
  %20 = load i64* %i, align 8
  %cmp19 = icmp sge i64 %20, 0
  br i1 %cmp19, label %for.body20, label %for.end29

11
  %21 = load i64* %i, align 8
  %arrayidx21 = getelementptr inbounds i64* %vla, i64 %21
  %22 = load i64* %arrayidx21, align 8
  %arrayidx22 = getelementptr inbounds [100001 x i64]* %right, i32 0, i64 %22
  %23 = load i64* %arrayidx22, align 8
  %cmp23 = icmp eq i64 %23, -1
  br i1 %cmp23, label %if.then24, label %if.end27

12
  %24 = load i64* %i, align 8
  %25 = load i64* %i, align 8
  %arrayidx25 = getelementptr inbounds i64* %vla, i64 %25
  %26 = load i64* %arrayidx25, align 8
  %arrayidx26 = getelementptr inbounds [100001 x i64]* %right, i32 0, i64 %26
  store i64 %24, i64* %arrayidx26, align 8
  br label %if.end27

13
  %27 = load i64* %i, align 8
  %dec = add nsw i64 %27, -1
  store i64 %dec, i64* %i, align 8
  br label %for.cond18

14
  store i64 -2147483648, i64* %max, align 8
  store i64 2147483647, i64* %size, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond30

15
  %28 = load i64* %i, align 8
  %cmp31 = icmp slt i64 %28, 100001
  br i1 %cmp31, label %for.body32, label %for.end57

16
  %29 = load i64* %i, align 8
  %arrayidx33 = getelementptr inbounds [100001 x i64]* @freq, i32 0, i64 %29
  %30 = load i64* %arrayidx33, align 8
  %31 = load i64* %max, align 8
  %cmp34 = icmp eq i64 %30, %31
  br i1 %cmp34, label %if.then35, label %if.else

17
  %32 = load i64* %i, align 8
  %arrayidx36 = getelementptr inbounds [100001 x i64]* %right, i32 0, i64 %32
  %33 = load i64* %arrayidx36, align 8
  %34 = load i64* %i, align 8
  %arrayidx37 = getelementptr inbounds [100001 x i64]* %left, i32 0, i64 %34
  %35 = load i64* %arrayidx37, align 8
  %sub38 = sub nsw i64 %33, %35
  %36 = load i64* %size, align 8
  %cmp39 = icmp sle i64 %sub38, %36
  br i1 %cmp39, label %if.then40, label %if.end45

18
  %37 = load i64* %i, align 8
  %arrayidx41 = getelementptr inbounds [100001 x i64]* @freq, i32 0, i64 %37
  %38 = load i64* %arrayidx41, align 8
  store i64 %38, i64* %max, align 8
  %39 = load i64* %i, align 8
  %arrayidx42 = getelementptr inbounds [100001 x i64]* %left, i32 0, i64 %39
  %40 = load i64* %arrayidx42, align 8
  store i64 %40, i64* %l, align 8
  %41 = load i64* %i, align 8
  %arrayidx43 = getelementptr inbounds [100001 x i64]* %right, i32 0, i64 %41
  %42 = load i64* %arrayidx43, align 8
  store i64 %42, i64* %r, align 8
  %43 = load i64* %r, align 8
  %44 = load i64* %l, align 8
  %sub44 = sub nsw i64 %43, %44
  store i64 %sub44, i64* %size, align 8
  br label %if.end45

19
  br label %if.end54

20
  %45 = load i64* %i, align 8
  %arrayidx46 = getelementptr inbounds [100001 x i64]* @freq, i32 0, i64 %45
  %46 = load i64* %arrayidx46, align 8
  %47 = load i64* %max, align 8
  %cmp47 = icmp sgt i64 %46, %47
  br i1 %cmp47, label %if.then48, label %if.end53

21
  %48 = load i64* %i, align 8
  %arrayidx49 = getelementptr inbounds [100001 x i64]* @freq, i32 0, i64 %48
  %49 = load i64* %arrayidx49, align 8
  store i64 %49, i64* %max, align 8
  %50 = load i64* %i, align 8
  %arrayidx50 = getelementptr inbounds [100001 x i64]* %left, i32 0, i64 %50
  %51 = load i64* %arrayidx50, align 8
  store i64 %51, i64* %l, align 8
  %52 = load i64* %i, align 8
  %arrayidx51 = getelementptr inbounds [100001 x i64]* %right, i32 0, i64 %52
  %53 = load i64* %arrayidx51, align 8
  store i64 %53, i64* %r, align 8
  %54 = load i64* %r, align 8
  %55 = load i64* %l, align 8
  %sub52 = sub nsw i64 %54, %55
  store i64 %sub52, i64* %size, align 8
  br label %if.end53

22
  br label %if.end54

23
  %56 = load i64* %i, align 8
  %inc56 = add nsw i64 %56, 1
  store i64 %inc56, i64* %i, align 8
  br label %for.cond30

24
  %57 = load i64* %l, align 8
  %add = add nsw i64 %57, 1
  %call58 = call %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"* @_ZSt4cout, i64 %add)
  %call59 = call %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* %call58, i8* getelementptr inbounds ([2 x i8]* @.str, i32 0, i32 0))
  %58 = load i64* %r, align 8
  %add60 = add nsw i64 %58, 1
  %call61 = call %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"* %call59, i64 %add60)
  %call62 = call %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* %call61, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  store i32 0, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  %59 = load i8** %saved_stack
  call void @llvm.stackrestore(i8* %59)
  %60 = load i32* %retval
  ret i32 %60
