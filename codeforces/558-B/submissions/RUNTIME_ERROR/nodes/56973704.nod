
1
  %retval = alloca i32, align 4
  %n = alloca i64, align 8
  %l = alloca i64, align 8
  %r = alloca i64, align 8
  %i = alloca i64, align 8
  %q = alloca i64, align 8
  store i32 0, i32* %retval
  %call = call i32 (i8*, ...)* @scanf(i8* getelementptr inbounds ([5 x i8]* @.str, i32 0, i32 0), i64* %n)
  store i64 0, i64* %l, align 8
  store i64 0, i64* %r, align 8
  store i64 1, i64* %i, align 8
  br label %for.cond

2
  %0 = load i64* %i, align 8
  %1 = load i64* %n, align 8
  %cmp = icmp sle i64 %0, %1
  br i1 %cmp, label %for.body, label %for.end

3
  %call1 = call i32 (i8*, ...)* @scanf(i8* getelementptr inbounds ([5 x i8]* @.str, i32 0, i32 0), i64* %q)
  %2 = load i64* %q, align 8
  %arrayidx = getelementptr inbounds [100005 x %struct.node]* @p, i32 0, i64 %2
  %cnt = getelementptr inbounds %struct.node* %arrayidx, i32 0, i32 2
  %3 = load i64* %cnt, align 8
  %tobool = icmp ne i64 %3, 0
  br i1 %tobool, label %if.then, label %if.else

4
  %4 = load i64* %i, align 8
  %5 = load i64* %q, align 8
  %arrayidx2 = getelementptr inbounds [100005 x %struct.node]* @p, i32 0, i64 %5
  %y = getelementptr inbounds %struct.node* %arrayidx2, i32 0, i32 1
  store i64 %4, i64* %y, align 8
  br label %if.end

5
  %6 = load i64* %i, align 8
  %7 = load i64* %q, align 8
  %arrayidx3 = getelementptr inbounds [100005 x %struct.node]* @p, i32 0, i64 %7
  %x = getelementptr inbounds %struct.node* %arrayidx3, i32 0, i32 0
  store i64 %6, i64* %x, align 8
  %8 = load i64* %i, align 8
  %9 = load i64* %q, align 8
  %arrayidx4 = getelementptr inbounds [100005 x %struct.node]* @p, i32 0, i64 %9
  %y5 = getelementptr inbounds %struct.node* %arrayidx4, i32 0, i32 1
  store i64 %8, i64* %y5, align 8
  br label %if.end

6
  %10 = load i64* %q, align 8
  %arrayidx6 = getelementptr inbounds [100005 x %struct.node]* @p, i32 0, i64 %10
  %cnt7 = getelementptr inbounds %struct.node* %arrayidx6, i32 0, i32 2
  %11 = load i64* %cnt7, align 8
  %inc = add nsw i64 %11, 1
  store i64 %inc, i64* %cnt7, align 8
  %12 = load i64* %i, align 8
  %inc8 = add nsw i64 %12, 1
  store i64 %inc8, i64* %i, align 8
  br label %for.cond

7
  %13 = load i64* %n, align 8
  %add.ptr = getelementptr inbounds %struct.node* getelementptr inbounds ([100005 x %struct.node]* @p, i32 0, i32 0), i64 %13
  %add.ptr9 = getelementptr inbounds %struct.node* %add.ptr, i64 1
  call void @_ZSt4sortIP4nodePFbRKS0_S3_EEvT_S6_T0_(%struct.node* getelementptr inbounds ([100005 x %struct.node]* @p, i32 0, i64 1), %struct.node* %add.ptr9, i1 (%struct.node*, %struct.node*)* @_Z3cmpRK4nodeS1_)
  %14 = load i64* getelementptr inbounds ([100005 x %struct.node]* @p, i32 0, i64 1, i32 0), align 8
  store i64 %14, i64* %l, align 8
  %15 = load i64* getelementptr inbounds ([100005 x %struct.node]* @p, i32 0, i64 1, i32 1), align 8
  store i64 %15, i64* %r, align 8
  %16 = load i64* %l, align 8
  %17 = load i64* %r, align 8
  %call10 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([11 x i8]* @.str2, i32 0, i32 0), i64 %16, i64 %17)
  ret i32 0
