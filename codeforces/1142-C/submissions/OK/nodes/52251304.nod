
1
  %retval = alloca i32, align 4
  %n = alloca i32, align 4
  %i = alloca i32, align 4
  %x = alloca i64, align 8
  %y = alloca i64, align 8
  %ref.tmp = alloca %struct.Point, align 8
  store i32 0, i32* %retval
  %call = call i32 (i8*, ...)* @scanf(i8* getelementptr inbounds ([3 x i8]* @.str, i32 0, i32 0), i32* %n)
  store i32 1, i32* %i, align 4
  br label %for.cond

2
  %0 = load i32* %i, align 4
  %1 = load i32* %n, align 4
  %cmp = icmp sle i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

3
  %call1 = call i32 (i8*, ...)* @scanf(i8* getelementptr inbounds ([9 x i8]* @.str3, i32 0, i32 0), i64* %x, i64* %y)
  %2 = load i32* %i, align 4
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds [200005 x %struct.Point]* @p, i32 0, i64 %idxprom
  %3 = load i64* %x, align 8
  %4 = load i64* %y, align 8
  %5 = load i64* %x, align 8
  %6 = load i64* %x, align 8
  %mul = mul nsw i64 %5, %6
  %sub = sub nsw i64 %4, %mul
  call void @_ZN5PointC1Exx(%struct.Point* %ref.tmp, i64 %3, i64 %sub)
  %7 = bitcast %struct.Point* %arrayidx to i8*
  %8 = bitcast %struct.Point* %ref.tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %7, i8* %8, i64 16, i32 8, i1 false)
  %9 = load i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

4
  %10 = load i32* %n, align 4
  %call2 = call i32 @_Z5solvei(i32 %10)
  %call3 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str4, i32 0, i32 0), i32 %call2)
  ret i32 0
