
1
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %i13 = alloca i32, align 4
  %coerce = alloca %struct.Point, align 8
  %ref.tmp = alloca %struct.Point, align 8
  %ans = alloca i32, align 4
  %i45 = alloca i32, align 4
  store i32 0, i32* %retval
  %call = call i32 (i8*, ...)* @scanf(i8* getelementptr inbounds ([3 x i8]* @.str, i32 0, i32 0), i32* @n)
  store i32 1, i32* %i, align 4
  br label %for.cond

2
  %0 = load i32* %i, align 4
  %1 = load i32* @n, align 4
  %cmp = icmp sle i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

3
  %2 = load i32* %i, align 4
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds [100005 x %struct.Point]* @P, i32 0, i64 %idxprom
  %x = getelementptr inbounds %struct.Point* %arrayidx, i32 0, i32 0
  %3 = load i32* %i, align 4
  %idxprom1 = sext i32 %3 to i64
  %arrayidx2 = getelementptr inbounds [100005 x %struct.Point]* @P, i32 0, i64 %idxprom1
  %y = getelementptr inbounds %struct.Point* %arrayidx2, i32 0, i32 1
  %call3 = call i32 (i8*, ...)* @scanf(i8* getelementptr inbounds ([7 x i8]* @.str3, i32 0, i32 0), double* %x, double* %y)
  %4 = load i32* %i, align 4
  %idxprom4 = sext i32 %4 to i64
  %arrayidx5 = getelementptr inbounds [100005 x %struct.Point]* @P, i32 0, i64 %idxprom4
  %x6 = getelementptr inbounds %struct.Point* %arrayidx5, i32 0, i32 0
  %5 = load double* %x6, align 8
  %6 = load i32* %i, align 4
  %idxprom7 = sext i32 %6 to i64
  %arrayidx8 = getelementptr inbounds [100005 x %struct.Point]* @P, i32 0, i64 %idxprom7
  %x9 = getelementptr inbounds %struct.Point* %arrayidx8, i32 0, i32 0
  %7 = load double* %x9, align 8
  %mul = fmul double %5, %7
  %8 = load i32* %i, align 4
  %idxprom10 = sext i32 %8 to i64
  %arrayidx11 = getelementptr inbounds [100005 x %struct.Point]* @P, i32 0, i64 %idxprom10
  %y12 = getelementptr inbounds %struct.Point* %arrayidx11, i32 0, i32 1
  %9 = load double* %y12, align 8
  %sub = fsub double %9, %mul
  store double %sub, double* %y12, align 8
  %10 = load i32* %i, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

4
  %11 = load i32* @n, align 4
  %idx.ext = sext i32 %11 to i64
  %add.ptr = getelementptr inbounds %struct.Point* getelementptr inbounds ([100005 x %struct.Point]* @P, i32 0, i64 1), i64 %idx.ext
  call void @_ZSt4sortIP5PointEvT_S2_(%struct.Point* getelementptr inbounds ([100005 x %struct.Point]* @P, i32 0, i64 1), %struct.Point* %add.ptr)
  store i32 1, i32* %i13, align 4
  br label %for.cond14

5
  %12 = load i32* %i13, align 4
  %13 = load i32* @n, align 4
  %cmp15 = icmp sle i32 %12, %13
  br i1 %cmp15, label %for.body16, label %for.end43

6
  br label %for.cond17

7
  %14 = load i32* @tp, align 4
  %tobool = icmp ne i32 %14, 0
  br i1 %tobool, label %land.rhs, label %land.end

8
  %15 = load i32* @tp, align 4
  %sub18 = sub nsw i32 %15, 1
  %idxprom19 = sext i32 %sub18 to i64
  %arrayidx20 = getelementptr inbounds [100005 x %struct.Point]* @Q, i32 0, i64 %idxprom19
  %16 = load i32* @tp, align 4
  %sub21 = sub nsw i32 %16, 2
  %idxprom22 = sext i32 %sub21 to i64
  %arrayidx23 = getelementptr inbounds [100005 x %struct.Point]* @Q, i32 0, i64 %idxprom22
  %call24 = call { double, double } @_ZNK5PointmiERKS_(%struct.Point* %arrayidx20, %struct.Point* %arrayidx23)
  %17 = bitcast %struct.Point* %coerce to { double, double }*
  %18 = getelementptr { double, double }* %17, i32 0, i32 0
  %19 = extractvalue { double, double } %call24, 0
  store double %19, double* %18, align 1
  %20 = getelementptr { double, double }* %17, i32 0, i32 1
  %21 = extractvalue { double, double } %call24, 1
  store double %21, double* %20, align 1
  %22 = load i32* %i13, align 4
  %idxprom25 = sext i32 %22 to i64
  %arrayidx26 = getelementptr inbounds [100005 x %struct.Point]* @P, i32 0, i64 %idxprom25
  %23 = load i32* @tp, align 4
  %sub27 = sub nsw i32 %23, 1
  %idxprom28 = sext i32 %sub27 to i64
  %arrayidx29 = getelementptr inbounds [100005 x %struct.Point]* @Q, i32 0, i64 %idxprom28
  %call30 = call { double, double } @_ZNK5PointmiERKS_(%struct.Point* %arrayidx26, %struct.Point* %arrayidx29)
  %24 = bitcast %struct.Point* %ref.tmp to { double, double }*
  %25 = getelementptr { double, double }* %24, i32 0, i32 0
  %26 = extractvalue { double, double } %call30, 0
  store double %26, double* %25, align 1
  %27 = getelementptr { double, double }* %24, i32 0, i32 1
  %28 = extractvalue { double, double } %call30, 1
  store double %28, double* %27, align 1
  %call31 = call double @_ZNK5PointmlERKS_(%struct.Point* %coerce, %struct.Point* %ref.tmp)
  %cmp32 = fcmp oge double %call31, -1.000000e-10
  br label %land.end

9
  %29 = phi i1 [ false, %for.cond17 ], [ %cmp32, %land.rhs ]
  br i1 %29, label %for.body33, label %for.end35

10
  %30 = load i32* @tp, align 4
  %dec = add nsw i32 %30, -1
  store i32 %dec, i32* @tp, align 4
  br label %for.cond17

11
  %31 = load i32* @tp, align 4
  %inc36 = add nsw i32 %31, 1
  store i32 %inc36, i32* @tp, align 4
  %idxprom37 = sext i32 %31 to i64
  %arrayidx38 = getelementptr inbounds [100005 x %struct.Point]* @Q, i32 0, i64 %idxprom37
  %32 = load i32* %i13, align 4
  %idxprom39 = sext i32 %32 to i64
  %arrayidx40 = getelementptr inbounds [100005 x %struct.Point]* @P, i32 0, i64 %idxprom39
  %33 = bitcast %struct.Point* %arrayidx38 to i8*
  %34 = bitcast %struct.Point* %arrayidx40 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %33, i8* %34, i64 16, i32 8, i1 false)
  %35 = load i32* %i13, align 4
  %inc42 = add nsw i32 %35, 1
  store i32 %inc42, i32* %i13, align 4
  br label %for.cond14

12
  %36 = load i32* @tp, align 4
  %sub44 = sub nsw i32 %36, 1
  store i32 %sub44, i32* %ans, align 4
  store i32 1, i32* %i45, align 4
  br label %for.cond46

13
  %37 = load i32* %i45, align 4
  %38 = load i32* @tp, align 4
  %cmp47 = icmp slt i32 %37, %38
  br i1 %cmp47, label %for.body48, label %for.end60

14
  %39 = load i32* %i45, align 4
  %idxprom49 = sext i32 %39 to i64
  %arrayidx50 = getelementptr inbounds [100005 x %struct.Point]* @Q, i32 0, i64 %idxprom49
  %x51 = getelementptr inbounds %struct.Point* %arrayidx50, i32 0, i32 0
  %40 = load double* %x51, align 8
  %41 = load i32* %i45, align 4
  %sub52 = sub nsw i32 %41, 1
  %idxprom53 = sext i32 %sub52 to i64
  %arrayidx54 = getelementptr inbounds [100005 x %struct.Point]* @Q, i32 0, i64 %idxprom53
  %x55 = getelementptr inbounds %struct.Point* %arrayidx54, i32 0, i32 0
  %42 = load double* %x55, align 8
  %cmp56 = fcmp oeq double %40, %42
  br i1 %cmp56, label %if.then, label %if.end

15
  %43 = load i32* %ans, align 4
  %dec57 = add nsw i32 %43, -1
  store i32 %dec57, i32* %ans, align 4
  br label %if.end

16
  %44 = load i32* %i45, align 4
  %inc59 = add nsw i32 %44, 1
  store i32 %inc59, i32* %i45, align 4
  br label %for.cond46

17
  %45 = load i32* %ans, align 4
  %call61 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str4, i32 0, i32 0), i32 %45)
  %46 = load i32* %retval
  ret i32 %46
