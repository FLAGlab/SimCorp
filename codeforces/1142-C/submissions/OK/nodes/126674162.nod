
1
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %i14 = alloca i32, align 4
  %i36 = alloca i32, align 4
  %agg.tmp = alloca %struct.point, align 8
  %agg.tmp44 = alloca %struct.point, align 8
  %agg.tmp46 = alloca %struct.point, align 8
  store i32 0, i32* %retval
  %call = call i32 (i8*, ...)* @scanf(i8* getelementptr inbounds ([5 x i8]* @.str, i32 0, i32 0), i64* @n)
  store i32 1, i32* %i, align 4
  br label %for.cond

2
  %0 = load i32* %i, align 4
  %conv = sext i32 %0 to i64
  %1 = load i64* @n, align 8
  %cmp = icmp sle i64 %conv, %1
  br i1 %cmp, label %for.body, label %for.end

3
  %2 = load i32* %i, align 4
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds [1000005 x %struct.point]* @b, i32 0, i64 %idxprom
  %x = getelementptr inbounds %struct.point* %arrayidx, i32 0, i32 0
  %3 = load i32* %i, align 4
  %idxprom1 = sext i32 %3 to i64
  %arrayidx2 = getelementptr inbounds [1000005 x %struct.point]* @b, i32 0, i64 %idxprom1
  %y = getelementptr inbounds %struct.point* %arrayidx2, i32 0, i32 1
  %call3 = call i32 (i8*, ...)* @scanf(i8* getelementptr inbounds ([10 x i8]* @.str1, i32 0, i32 0), i64* %x, i64* %y)
  %4 = load i32* %i, align 4
  %idxprom4 = sext i32 %4 to i64
  %arrayidx5 = getelementptr inbounds [1000005 x %struct.point]* @b, i32 0, i64 %idxprom4
  %x6 = getelementptr inbounds %struct.point* %arrayidx5, i32 0, i32 0
  %5 = load i64* %x6, align 8
  %6 = load i32* %i, align 4
  %idxprom7 = sext i32 %6 to i64
  %arrayidx8 = getelementptr inbounds [1000005 x %struct.point]* @b, i32 0, i64 %idxprom7
  %x9 = getelementptr inbounds %struct.point* %arrayidx8, i32 0, i32 0
  %7 = load i64* %x9, align 8
  %mul = mul nsw i64 %5, %7
  %8 = load i32* %i, align 4
  %idxprom10 = sext i32 %8 to i64
  %arrayidx11 = getelementptr inbounds [1000005 x %struct.point]* @b, i32 0, i64 %idxprom10
  %y12 = getelementptr inbounds %struct.point* %arrayidx11, i32 0, i32 1
  %9 = load i64* %y12, align 8
  %sub = sub nsw i64 %9, %mul
  store i64 %sub, i64* %y12, align 8
  %10 = load i32* %i, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

4
  %11 = load i64* @n, align 8
  %add.ptr = getelementptr inbounds %struct.point* getelementptr inbounds ([1000005 x %struct.point]* @b, i32 0, i32 0), i64 %11
  %add.ptr13 = getelementptr inbounds %struct.point* %add.ptr, i64 1
  call void @_ZSt4sortIP5pointPFbS0_S0_EEvT_S4_T0_(%struct.point* getelementptr inbounds ([1000005 x %struct.point]* @b, i32 0, i64 1), %struct.point* %add.ptr13, i1 (i64, i64, i64, i64)* @_Z3cmp5pointS_)
  store i32 1, i32* %i14, align 4
  br label %for.cond15

5
  %12 = load i32* %i14, align 4
  %conv16 = sext i32 %12 to i64
  %13 = load i64* @n, align 8
  %cmp17 = icmp sle i64 %conv16, %13
  br i1 %cmp17, label %for.body18, label %for.end33

6
  %14 = load i32* %i14, align 4
  %idxprom19 = sext i32 %14 to i64
  %arrayidx20 = getelementptr inbounds [1000005 x %struct.point]* @b, i32 0, i64 %idxprom19
  %x21 = getelementptr inbounds %struct.point* %arrayidx20, i32 0, i32 0
  %15 = load i64* %x21, align 8
  %16 = load i32* %i14, align 4
  %sub22 = sub nsw i32 %16, 1
  %idxprom23 = sext i32 %sub22 to i64
  %arrayidx24 = getelementptr inbounds [1000005 x %struct.point]* @b, i32 0, i64 %idxprom23
  %x25 = getelementptr inbounds %struct.point* %arrayidx24, i32 0, i32 0
  %17 = load i64* %x25, align 8
  %cmp26 = icmp ne i64 %15, %17
  br i1 %cmp26, label %if.then, label %if.end

7
  %18 = load i64* @m, align 8
  %inc27 = add nsw i64 %18, 1
  store i64 %inc27, i64* @m, align 8
  %arrayidx28 = getelementptr inbounds [1000005 x %struct.point]* @a, i32 0, i64 %inc27
  %19 = load i32* %i14, align 4
  %idxprom29 = sext i32 %19 to i64
  %arrayidx30 = getelementptr inbounds [1000005 x %struct.point]* @b, i32 0, i64 %idxprom29
  %20 = bitcast %struct.point* %arrayidx28 to i8*
  %21 = bitcast %struct.point* %arrayidx30 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %20, i8* %21, i64 16, i32 8, i1 false)
  br label %if.end

8
  %22 = load i32* %i14, align 4
  %inc32 = add nsw i32 %22, 1
  store i32 %inc32, i32* %i14, align 4
  br label %for.cond15

9
  %23 = load i64* @top, align 8
  %inc34 = add nsw i64 %23, 1
  store i64 %inc34, i64* @top, align 8
  %arrayidx35 = getelementptr inbounds [1000005 x %struct.point]* @st, i32 0, i64 %inc34
  %24 = bitcast %struct.point* %arrayidx35 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %24, i8* bitcast (%struct.point* getelementptr inbounds ([1000005 x %struct.point]* @a, i32 0, i64 1) to i8*), i64 16, i32 8, i1 false)
  store i32 2, i32* %i36, align 4
  br label %for.cond37

10
  %25 = load i32* %i36, align 4
  %conv38 = sext i32 %25 to i64
  %26 = load i64* @m, align 8
  %cmp39 = icmp sle i64 %conv38, %26
  br i1 %cmp39, label %for.body40, label %for.end56

11
  br label %while.cond

12
  %27 = load i64* @top, align 8
  %cmp41 = icmp sgt i64 %27, 1
  br i1 %cmp41, label %land.rhs, label %land.end

13
  %28 = load i64* @top, align 8
  %sub42 = sub nsw i64 %28, 1
  %arrayidx43 = getelementptr inbounds [1000005 x %struct.point]* @st, i32 0, i64 %sub42
  %29 = bitcast %struct.point* %agg.tmp to i8*
  %30 = bitcast %struct.point* %arrayidx43 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %29, i8* %30, i64 16, i32 8, i1 false)
  %31 = load i64* @top, align 8
  %arrayidx45 = getelementptr inbounds [1000005 x %struct.point]* @st, i32 0, i64 %31
  %32 = bitcast %struct.point* %agg.tmp44 to i8*
  %33 = bitcast %struct.point* %arrayidx45 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %32, i8* %33, i64 16, i32 8, i1 false)
  %34 = load i32* %i36, align 4
  %idxprom47 = sext i32 %34 to i64
  %arrayidx48 = getelementptr inbounds [1000005 x %struct.point]* @a, i32 0, i64 %idxprom47
  %35 = bitcast %struct.point* %agg.tmp46 to i8*
  %36 = bitcast %struct.point* %arrayidx48 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %35, i8* %36, i64 16, i32 8, i1 false)
  %37 = bitcast %struct.point* %agg.tmp to { i64, i64 }*
  %38 = getelementptr { i64, i64 }* %37, i32 0, i32 0
  %39 = load i64* %38, align 1
  %40 = getelementptr { i64, i64 }* %37, i32 0, i32 1
  %41 = load i64* %40, align 1
  %42 = bitcast %struct.point* %agg.tmp44 to { i64, i64 }*
  %43 = getelementptr { i64, i64 }* %42, i32 0, i32 0
  %44 = load i64* %43, align 1
  %45 = getelementptr { i64, i64 }* %42, i32 0, i32 1
  %46 = load i64* %45, align 1
  %47 = bitcast %struct.point* %agg.tmp46 to { i64, i64 }*
  %48 = getelementptr { i64, i64 }* %47, i32 0, i32 0
  %49 = load i64* %48, align 1
  %50 = getelementptr { i64, i64 }* %47, i32 0, i32 1
  %51 = load i64* %50, align 1
  %call49 = call double @_Z3cal5pointS_S_(i64 %39, i64 %41, i64 %44, i64 %46, i64 %49, i64 %51)
  %tobool = fcmp une double %call49, 0.000000e+00
  br label %land.end

14
  %52 = phi i1 [ false, %while.cond ], [ %tobool, %land.rhs ]
  br i1 %52, label %while.body, label %while.end

15
  %53 = load i64* @top, align 8
  %dec = add nsw i64 %53, -1
  store i64 %dec, i64* @top, align 8
  br label %while.cond

16
  %54 = load i64* @top, align 8
  %inc50 = add nsw i64 %54, 1
  store i64 %inc50, i64* @top, align 8
  %arrayidx51 = getelementptr inbounds [1000005 x %struct.point]* @st, i32 0, i64 %inc50
  %55 = load i32* %i36, align 4
  %idxprom52 = sext i32 %55 to i64
  %arrayidx53 = getelementptr inbounds [1000005 x %struct.point]* @a, i32 0, i64 %idxprom52
  %56 = bitcast %struct.point* %arrayidx51 to i8*
  %57 = bitcast %struct.point* %arrayidx53 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %56, i8* %57, i64 16, i32 8, i1 false)
  %58 = load i32* %i36, align 4
  %inc55 = add nsw i32 %58, 1
  store i32 %inc55, i32* %i36, align 4
  br label %for.cond37

17
  %59 = load i64* @top, align 8
  %sub57 = sub nsw i64 %59, 1
  %call58 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([6 x i8]* @.str2, i32 0, i32 0), i64 %sub57)
  ret i32 0
