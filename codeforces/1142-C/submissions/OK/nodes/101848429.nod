
1
  %retval = alloca i32, align 4
  %i = alloca i64, align 8
  %i10 = alloca i64, align 8
  %agg.tmp = alloca %struct.point, align 8
  %agg.tmp23 = alloca %struct.point, align 8
  %agg.tmp25 = alloca %struct.point, align 8
  store i32 0, i32* %retval
  %call = call %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* @_ZSt3cin, i64* @n)
  store i64 1, i64* %i, align 8
  br label %for.cond

2
  %0 = load i64* %i, align 8
  %1 = load i64* @n, align 8
  %cmp = icmp sle i64 %0, %1
  br i1 %cmp, label %for.body, label %for.end

3
  %2 = load i64* %i, align 8
  %arrayidx = getelementptr inbounds [100005 x %struct.point]* @a, i32 0, i64 %2
  %x = getelementptr inbounds %struct.point* %arrayidx, i32 0, i32 0
  %call1 = call %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* @_ZSt3cin, i64* %x)
  %3 = load i64* %i, align 8
  %arrayidx2 = getelementptr inbounds [100005 x %struct.point]* @a, i32 0, i64 %3
  %y = getelementptr inbounds %struct.point* %arrayidx2, i32 0, i32 1
  %call3 = call %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* %call1, i64* %y)
  %4 = load i64* %i, align 8
  %arrayidx4 = getelementptr inbounds [100005 x %struct.point]* @a, i32 0, i64 %4
  %x5 = getelementptr inbounds %struct.point* %arrayidx4, i32 0, i32 0
  %5 = load i64* %x5, align 8
  %6 = load i64* %i, align 8
  %arrayidx6 = getelementptr inbounds [100005 x %struct.point]* @a, i32 0, i64 %6
  %x7 = getelementptr inbounds %struct.point* %arrayidx6, i32 0, i32 0
  %7 = load i64* %x7, align 8
  %mul = mul nsw i64 %5, %7
  %8 = load i64* %i, align 8
  %arrayidx8 = getelementptr inbounds [100005 x %struct.point]* @a, i32 0, i64 %8
  %y9 = getelementptr inbounds %struct.point* %arrayidx8, i32 0, i32 1
  %9 = load i64* %y9, align 8
  %sub = sub nsw i64 %9, %mul
  store i64 %sub, i64* %y9, align 8
  %10 = load i64* %i, align 8
  %inc = add nsw i64 %10, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

4
  %11 = load i64* @n, align 8
  %add.ptr = getelementptr inbounds %struct.point* getelementptr inbounds ([100005 x %struct.point]* @a, i32 0, i64 1), i64 %11
  call void @_ZSt4sortIP5pointPFbS0_S0_EEvT_S4_T0_(%struct.point* getelementptr inbounds ([100005 x %struct.point]* @a, i32 0, i64 1), %struct.point* %add.ptr, i1 (i64, i64, i64, i64)* @_Z3cmp5pointS_)
  store i64 1, i64* %i10, align 8
  br label %for.cond11

5
  %12 = load i64* %i10, align 8
  %13 = load i64* @n, align 8
  %cmp12 = icmp sle i64 %12, %13
  br i1 %cmp12, label %for.body13, label %for.end34

6
  %14 = load i64* %i10, align 8
  %15 = load i64* @n, align 8
  %cmp14 = icmp ne i64 %14, %15
  br i1 %cmp14, label %land.lhs.true, label %if.end

7
  %16 = load i64* %i10, align 8
  %arrayidx15 = getelementptr inbounds [100005 x %struct.point]* @a, i32 0, i64 %16
  %x16 = getelementptr inbounds %struct.point* %arrayidx15, i32 0, i32 0
  %17 = load i64* %x16, align 8
  %18 = load i64* %i10, align 8
  %add = add nsw i64 %18, 1
  %arrayidx17 = getelementptr inbounds [100005 x %struct.point]* @a, i32 0, i64 %add
  %x18 = getelementptr inbounds %struct.point* %arrayidx17, i32 0, i32 0
  %19 = load i64* %x18, align 8
  %cmp19 = icmp eq i64 %17, %19
  br i1 %cmp19, label %if.then, label %if.end

8
  br label %for.inc32

9
  br label %while.cond

10
  %20 = load i64* @cur, align 8
  %cmp20 = icmp sge i64 %20, 2
  br i1 %cmp20, label %land.rhs, label %land.end

11
  %21 = load i64* @cur, align 8
  %sub21 = sub nsw i64 %21, 1
  %arrayidx22 = getelementptr inbounds [100005 x %struct.point]* @ans, i32 0, i64 %sub21
  %22 = bitcast %struct.point* %agg.tmp to i8*
  %23 = bitcast %struct.point* %arrayidx22 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %22, i8* %23, i64 16, i32 8, i1 false)
  %24 = load i64* @cur, align 8
  %arrayidx24 = getelementptr inbounds [100005 x %struct.point]* @ans, i32 0, i64 %24
  %25 = bitcast %struct.point* %agg.tmp23 to i8*
  %26 = bitcast %struct.point* %arrayidx24 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %25, i8* %26, i64 16, i32 8, i1 false)
  %27 = load i64* %i10, align 8
  %arrayidx26 = getelementptr inbounds [100005 x %struct.point]* @a, i32 0, i64 %27
  %28 = bitcast %struct.point* %agg.tmp25 to i8*
  %29 = bitcast %struct.point* %arrayidx26 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %28, i8* %29, i64 16, i32 8, i1 false)
  %30 = bitcast %struct.point* %agg.tmp to { i64, i64 }*
  %31 = getelementptr { i64, i64 }* %30, i32 0, i32 0
  %32 = load i64* %31, align 1
  %33 = getelementptr { i64, i64 }* %30, i32 0, i32 1
  %34 = load i64* %33, align 1
  %35 = bitcast %struct.point* %agg.tmp23 to { i64, i64 }*
  %36 = getelementptr { i64, i64 }* %35, i32 0, i32 0
  %37 = load i64* %36, align 1
  %38 = getelementptr { i64, i64 }* %35, i32 0, i32 1
  %39 = load i64* %38, align 1
  %40 = bitcast %struct.point* %agg.tmp25 to { i64, i64 }*
  %41 = getelementptr { i64, i64 }* %40, i32 0, i32 0
  %42 = load i64* %41, align 1
  %43 = getelementptr { i64, i64 }* %40, i32 0, i32 1
  %44 = load i64* %43, align 1
  %call27 = call i64 @_Z3ccw5pointS_S_(i64 %32, i64 %34, i64 %37, i64 %39, i64 %42, i64 %44)
  %cmp28 = icmp sge i64 %call27, 0
  br label %land.end

12
  %45 = phi i1 [ false, %while.cond ], [ %cmp28, %land.rhs ]
  br i1 %45, label %while.body, label %while.end

13
  %46 = load i64* @cur, align 8
  %dec = add nsw i64 %46, -1
  store i64 %dec, i64* @cur, align 8
  br label %while.cond

14
  %47 = load i64* @cur, align 8
  %inc29 = add nsw i64 %47, 1
  store i64 %inc29, i64* @cur, align 8
  %arrayidx30 = getelementptr inbounds [100005 x %struct.point]* @ans, i32 0, i64 %inc29
  %48 = load i64* %i10, align 8
  %arrayidx31 = getelementptr inbounds [100005 x %struct.point]* @a, i32 0, i64 %48
  %49 = bitcast %struct.point* %arrayidx30 to i8*
  %50 = bitcast %struct.point* %arrayidx31 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %49, i8* %50, i64 16, i32 8, i1 false)
  br label %for.inc32

15
  %51 = load i64* %i10, align 8
  %inc33 = add nsw i64 %51, 1
  store i64 %inc33, i64* %i10, align 8
  br label %for.cond11

16
  %52 = load i64* @cur, align 8
  %sub35 = sub nsw i64 %52, 1
  %call36 = call %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"* @_ZSt4cout, i64 %sub35)
  %53 = load i32* %retval
  ret i32 %53
