
1
  %retval = alloca i32, align 4
  %i = alloca i64, align 8
  %x = alloca i64, align 8
  %y = alloca i64, align 8
  %i6 = alloca i64, align 8
  %agg.tmp = alloca %struct.nod, align 8
  %agg.tmp17 = alloca %struct.nod, align 8
  %agg.tmp21 = alloca %struct.nod, align 8
  %agg.tmp25 = alloca %struct.nod, align 8
  %agg.tmp26 = alloca %struct.nod, align 8
  %agg.tmp28 = alloca %struct.nod, align 8
  store i32 0, i32* %retval
  %call = call %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* @_ZSt3cin, i64* @n)
  store i64 0, i64* %i, align 8
  br label %for.cond

2
  %0 = load i64* %i, align 8
  %1 = load i64* @n, align 8
  %cmp = icmp slt i64 %0, %1
  br i1 %cmp, label %for.body, label %for.end

3
  %call1 = call i32 (i8*, ...)* @scanf(i8* getelementptr inbounds ([10 x i8]* @.str, i32 0, i32 0), i64* %x, i64* %y)
  %2 = load i64* %x, align 8
  %3 = load i64* %i, align 8
  %arrayidx = getelementptr inbounds [1000007 x %struct.nod]* @p, i32 0, i64 %3
  %x2 = getelementptr inbounds %struct.nod* %arrayidx, i32 0, i32 0
  store i64 %2, i64* %x2, align 8
  %4 = load i64* %y, align 8
  %5 = load i64* %x, align 8
  %mul = mul nsw i64 1, %5
  %6 = load i64* %x, align 8
  %mul3 = mul nsw i64 %mul, %6
  %sub = sub nsw i64 %4, %mul3
  %7 = load i64* %i, align 8
  %arrayidx4 = getelementptr inbounds [1000007 x %struct.nod]* @p, i32 0, i64 %7
  %y5 = getelementptr inbounds %struct.nod* %arrayidx4, i32 0, i32 1
  store i64 %sub, i64* %y5, align 8
  %8 = load i64* %i, align 8
  %inc = add nsw i64 %8, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

4
  %9 = load i64* @n, align 8
  %add.ptr = getelementptr inbounds %struct.nod* getelementptr inbounds ([1000007 x %struct.nod]* @p, i32 0, i32 0), i64 %9
  call void @_ZSt4sortIP3nodPFbS0_S0_EEvT_S4_T0_(%struct.nod* getelementptr inbounds ([1000007 x %struct.nod]* @p, i32 0, i32 0), %struct.nod* %add.ptr, i1 (i64, i64, i64, i64)* @_Z3cmp3nodS_)
  store i64 0, i64* @r, align 8
  store i64 0, i64* getelementptr inbounds ([1000007 x i64]* @d, i32 0, i64 0), align 8
  store i64 1, i64* %i6, align 8
  br label %for.cond7

5
  %10 = load i64* %i6, align 8
  %11 = load i64* @n, align 8
  %cmp8 = icmp slt i64 %10, %11
  br i1 %cmp8, label %for.body9, label %for.end38

6
  %12 = load i64* %i6, align 8
  %arrayidx10 = getelementptr inbounds [1000007 x %struct.nod]* @p, i32 0, i64 %12
  %x11 = getelementptr inbounds %struct.nod* %arrayidx10, i32 0, i32 0
  %13 = load i64* %x11, align 8
  %14 = load i64* %i6, align 8
  %sub12 = sub nsw i64 %14, 1
  %arrayidx13 = getelementptr inbounds [1000007 x %struct.nod]* @p, i32 0, i64 %sub12
  %x14 = getelementptr inbounds %struct.nod* %arrayidx13, i32 0, i32 0
  %15 = load i64* %x14, align 8
  %cmp15 = icmp eq i64 %13, %15
  br i1 %cmp15, label %if.then, label %if.end

7
  br label %for.inc36

8
  br label %while.cond

9
  %16 = load i64* @r, align 8
  %cmp16 = icmp sge i64 %16, 1
  br i1 %cmp16, label %land.rhs, label %land.end

10
  %17 = load i64* @r, align 8
  %sub18 = sub nsw i64 %17, 1
  %arrayidx19 = getelementptr inbounds [1000007 x i64]* @d, i32 0, i64 %sub18
  %18 = load i64* %arrayidx19, align 8
  %arrayidx20 = getelementptr inbounds [1000007 x %struct.nod]* @p, i32 0, i64 %18
  %19 = bitcast %struct.nod* %agg.tmp17 to i8*
  %20 = bitcast %struct.nod* %arrayidx20 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %19, i8* %20, i64 16, i32 8, i1 false)
  %21 = load i64* @r, align 8
  %arrayidx22 = getelementptr inbounds [1000007 x i64]* @d, i32 0, i64 %21
  %22 = load i64* %arrayidx22, align 8
  %arrayidx23 = getelementptr inbounds [1000007 x %struct.nod]* @p, i32 0, i64 %22
  %23 = bitcast %struct.nod* %agg.tmp21 to i8*
  %24 = bitcast %struct.nod* %arrayidx23 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %23, i8* %24, i64 16, i32 8, i1 false)
  %25 = bitcast %struct.nod* %agg.tmp17 to { i64, i64 }*
  %26 = getelementptr { i64, i64 }* %25, i32 0, i32 0
  %27 = load i64* %26, align 1
  %28 = getelementptr { i64, i64 }* %25, i32 0, i32 1
  %29 = load i64* %28, align 1
  %30 = bitcast %struct.nod* %agg.tmp21 to { i64, i64 }*
  %31 = getelementptr { i64, i64 }* %30, i32 0, i32 0
  %32 = load i64* %31, align 1
  %33 = getelementptr { i64, i64 }* %30, i32 0, i32 1
  %34 = load i64* %33, align 1
  %call24 = call { i64, i64 } @_Z3sub3nodS_(i64 %27, i64 %29, i64 %32, i64 %34)
  %35 = bitcast %struct.nod* %agg.tmp to { i64, i64 }*
  %36 = getelementptr { i64, i64 }* %35, i32 0, i32 0
  %37 = extractvalue { i64, i64 } %call24, 0
  store i64 %37, i64* %36, align 1
  %38 = getelementptr { i64, i64 }* %35, i32 0, i32 1
  %39 = extractvalue { i64, i64 } %call24, 1
  store i64 %39, i64* %38, align 1
  %40 = load i64* %i6, align 8
  %arrayidx27 = getelementptr inbounds [1000007 x %struct.nod]* @p, i32 0, i64 %40
  %41 = bitcast %struct.nod* %agg.tmp26 to i8*
  %42 = bitcast %struct.nod* %arrayidx27 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %41, i8* %42, i64 16, i32 8, i1 false)
  %43 = load i64* @r, align 8
  %arrayidx29 = getelementptr inbounds [1000007 x i64]* @d, i32 0, i64 %43
  %44 = load i64* %arrayidx29, align 8
  %arrayidx30 = getelementptr inbounds [1000007 x %struct.nod]* @p, i32 0, i64 %44
  %45 = bitcast %struct.nod* %agg.tmp28 to i8*
  %46 = bitcast %struct.nod* %arrayidx30 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %45, i8* %46, i64 16, i32 8, i1 false)
  %47 = bitcast %struct.nod* %agg.tmp26 to { i64, i64 }*
  %48 = getelementptr { i64, i64 }* %47, i32 0, i32 0
  %49 = load i64* %48, align 1
  %50 = getelementptr { i64, i64 }* %47, i32 0, i32 1
  %51 = load i64* %50, align 1
  %52 = bitcast %struct.nod* %agg.tmp28 to { i64, i64 }*
  %53 = getelementptr { i64, i64 }* %52, i32 0, i32 0
  %54 = load i64* %53, align 1
  %55 = getelementptr { i64, i64 }* %52, i32 0, i32 1
  %56 = load i64* %55, align 1
  %call31 = call { i64, i64 } @_Z3sub3nodS_(i64 %49, i64 %51, i64 %54, i64 %56)
  %57 = bitcast %struct.nod* %agg.tmp25 to { i64, i64 }*
  %58 = getelementptr { i64, i64 }* %57, i32 0, i32 0
  %59 = extractvalue { i64, i64 } %call31, 0
  store i64 %59, i64* %58, align 1
  %60 = getelementptr { i64, i64 }* %57, i32 0, i32 1
  %61 = extractvalue { i64, i64 } %call31, 1
  store i64 %61, i64* %60, align 1
  %62 = bitcast %struct.nod* %agg.tmp to { i64, i64 }*
  %63 = getelementptr { i64, i64 }* %62, i32 0, i32 0
  %64 = load i64* %63, align 1
  %65 = getelementptr { i64, i64 }* %62, i32 0, i32 1
  %66 = load i64* %65, align 1
  %67 = bitcast %struct.nod* %agg.tmp25 to { i64, i64 }*
  %68 = getelementptr { i64, i64 }* %67, i32 0, i32 0
  %69 = load i64* %68, align 1
  %70 = getelementptr { i64, i64 }* %67, i32 0, i32 1
  %71 = load i64* %70, align 1
  %call32 = call i64 @_Z5cross3nodS_(i64 %64, i64 %66, i64 %69, i64 %71)
  %cmp33 = icmp sge i64 %call32, 0
  br label %land.end

11
  %72 = phi i1 [ false, %while.cond ], [ %cmp33, %land.rhs ]
  br i1 %72, label %while.body, label %while.end

12
  %73 = load i64* @r, align 8
  %dec = add nsw i64 %73, -1
  store i64 %dec, i64* @r, align 8
  br label %while.cond

13
  %74 = load i64* %i6, align 8
  %75 = load i64* @r, align 8
  %inc34 = add nsw i64 %75, 1
  store i64 %inc34, i64* @r, align 8
  %arrayidx35 = getelementptr inbounds [1000007 x i64]* @d, i32 0, i64 %inc34
  store i64 %74, i64* %arrayidx35, align 8
  br label %for.inc36

14
  %76 = load i64* %i6, align 8
  %inc37 = add nsw i64 %76, 1
  store i64 %inc37, i64* %i6, align 8
  br label %for.cond7

15
  %77 = load i64* @r, align 8
  %call39 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0), i64 %77)
  %78 = load i32* %retval
  ret i32 %78
