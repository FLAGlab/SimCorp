
1
  %retval = alloca i32, align 4
  %i = alloca i64, align 8
  %nn = alloca i64, align 8
  %i12 = alloca i64, align 8
  %i27 = alloca i64, align 8
  %agg.tmp = alloca %struct.abc, align 8
  %agg.tmp32 = alloca %struct.abc, align 8
  %agg.tmp35 = alloca %struct.abc, align 8
  %agg.tmp38 = alloca %struct.abc, align 8
  %agg.tmp39 = alloca %struct.abc, align 8
  %agg.tmp41 = alloca %struct.abc, align 8
  store i32 0, i32* %retval
  %call = call %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* @_ZSt3cin, i64* @n)
  store i64 1, i64* %i, align 8
  br label %for.cond

2
  %0 = load i64* %i, align 8
  %1 = load i64* @n, align 8
  %cmp = icmp sle i64 %0, %1
  br i1 %cmp, label %for.body, label %for.end

3
  %2 = load i64* %i, align 8
  %arrayidx = getelementptr inbounds [100005 x %struct.abc]* @p, i32 0, i64 %2
  %x = getelementptr inbounds %struct.abc* %arrayidx, i32 0, i32 0
  %call1 = call %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* @_ZSt3cin, i64* %x)
  %3 = load i64* %i, align 8
  %arrayidx2 = getelementptr inbounds [100005 x %struct.abc]* @p, i32 0, i64 %3
  %y = getelementptr inbounds %struct.abc* %arrayidx2, i32 0, i32 1
  %call3 = call %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* %call1, i64* %y)
  %4 = load i64* %i, align 8
  %arrayidx4 = getelementptr inbounds [100005 x %struct.abc]* @p, i32 0, i64 %4
  %x5 = getelementptr inbounds %struct.abc* %arrayidx4, i32 0, i32 0
  %5 = load i64* %x5, align 8
  %6 = load i64* %i, align 8
  %arrayidx6 = getelementptr inbounds [100005 x %struct.abc]* @p, i32 0, i64 %6
  %x7 = getelementptr inbounds %struct.abc* %arrayidx6, i32 0, i32 0
  %7 = load i64* %x7, align 8
  %mul = mul nsw i64 %5, %7
  %8 = load i64* %i, align 8
  %arrayidx8 = getelementptr inbounds [100005 x %struct.abc]* @p, i32 0, i64 %8
  %y9 = getelementptr inbounds %struct.abc* %arrayidx8, i32 0, i32 1
  %9 = load i64* %y9, align 8
  %sub = sub nsw i64 %9, %mul
  store i64 %sub, i64* %y9, align 8
  %10 = load i64* %i, align 8
  %inc = add nsw i64 %10, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

4
  %11 = load i64* @n, align 8
  %add.ptr = getelementptr inbounds %struct.abc* getelementptr inbounds ([100005 x %struct.abc]* @p, i32 0, i32 0), i64 %11
  %add.ptr10 = getelementptr inbounds %struct.abc* %add.ptr, i64 1
  call void @_ZSt4sortIP3abcPFbS0_S0_EEvT_S4_T0_(%struct.abc* getelementptr inbounds ([100005 x %struct.abc]* @p, i32 0, i64 1), %struct.abc* %add.ptr10, i1 (i64, i64, i64, i64)* @_Z3cmp3abcS_)
  store i64 1, i64* %nn, align 8
  %12 = load i64* @n, align 8
  %arrayidx11 = getelementptr inbounds [100005 x %struct.abc]* @p, i32 0, i64 %12
  %13 = bitcast %struct.abc* %arrayidx11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* bitcast (%struct.abc* getelementptr inbounds ([100005 x %struct.abc]* @p2, i32 0, i64 1) to i8*), i8* %13, i64 16, i32 8, i1 false)
  %14 = load i64* @n, align 8
  %sub13 = sub nsw i64 %14, 1
  store i64 %sub13, i64* %i12, align 8
  br label %for.cond14

5
  %15 = load i64* %i12, align 8
  %cmp15 = icmp sge i64 %15, 1
  br i1 %cmp15, label %for.body16, label %for.end26

6
  %16 = load i64* %i12, align 8
  %arrayidx17 = getelementptr inbounds [100005 x %struct.abc]* @p, i32 0, i64 %16
  %x18 = getelementptr inbounds %struct.abc* %arrayidx17, i32 0, i32 0
  %17 = load i64* %x18, align 8
  %18 = load i64* %i12, align 8
  %add = add nsw i64 %18, 1
  %arrayidx19 = getelementptr inbounds [100005 x %struct.abc]* @p, i32 0, i64 %add
  %x20 = getelementptr inbounds %struct.abc* %arrayidx19, i32 0, i32 0
  %19 = load i64* %x20, align 8
  %cmp21 = icmp ne i64 %17, %19
  br i1 %cmp21, label %if.then, label %if.end

7
  %20 = load i64* %nn, align 8
  %inc22 = add nsw i64 %20, 1
  store i64 %inc22, i64* %nn, align 8
  %arrayidx23 = getelementptr inbounds [100005 x %struct.abc]* @p2, i32 0, i64 %inc22
  %21 = load i64* %i12, align 8
  %arrayidx24 = getelementptr inbounds [100005 x %struct.abc]* @p, i32 0, i64 %21
  %22 = bitcast %struct.abc* %arrayidx23 to i8*
  %23 = bitcast %struct.abc* %arrayidx24 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %22, i8* %23, i64 16, i32 8, i1 false)
  br label %if.end

8
  %24 = load i64* %i12, align 8
  %dec = add nsw i64 %24, -1
  store i64 %dec, i64* %i12, align 8
  br label %for.cond14

9
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* bitcast (%struct.abc* getelementptr inbounds ([100005 x %struct.abc]* @q, i32 0, i64 1) to i8*), i8* bitcast (%struct.abc* getelementptr inbounds ([100005 x %struct.abc]* @p2, i32 0, i64 1) to i8*), i64 16, i32 8, i1 false)
  store i64 1, i64* @top, align 8
  store i64 2, i64* %i27, align 8
  br label %for.cond28

10
  %25 = load i64* %i27, align 8
  %26 = load i64* %nn, align 8
  %cmp29 = icmp sle i64 %25, %26
  br i1 %cmp29, label %for.body30, label %for.end52

11
  br label %while.cond

12
  %27 = load i64* @top, align 8
  %cmp31 = icmp sge i64 %27, 2
  br i1 %cmp31, label %land.rhs, label %land.end

13
  %28 = load i64* @top, align 8
  %sub33 = sub nsw i64 %28, 1
  %arrayidx34 = getelementptr inbounds [100005 x %struct.abc]* @q, i32 0, i64 %sub33
  %29 = bitcast %struct.abc* %agg.tmp32 to i8*
  %30 = bitcast %struct.abc* %arrayidx34 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %29, i8* %30, i64 16, i32 8, i1 false)
  %31 = load i64* @top, align 8
  %arrayidx36 = getelementptr inbounds [100005 x %struct.abc]* @q, i32 0, i64 %31
  %32 = bitcast %struct.abc* %agg.tmp35 to i8*
  %33 = bitcast %struct.abc* %arrayidx36 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %32, i8* %33, i64 16, i32 8, i1 false)
  %34 = bitcast %struct.abc* %agg.tmp32 to { i64, i64 }*
  %35 = getelementptr { i64, i64 }* %34, i32 0, i32 0
  %36 = load i64* %35, align 1
  %37 = getelementptr { i64, i64 }* %34, i32 0, i32 1
  %38 = load i64* %37, align 1
  %39 = bitcast %struct.abc* %agg.tmp35 to { i64, i64 }*
  %40 = getelementptr { i64, i64 }* %39, i32 0, i32 0
  %41 = load i64* %40, align 1
  %42 = getelementptr { i64, i64 }* %39, i32 0, i32 1
  %43 = load i64* %42, align 1
  %call37 = call { i64, i64 } @_Z7vectorr3abcS_(i64 %36, i64 %38, i64 %41, i64 %43)
  %44 = bitcast %struct.abc* %agg.tmp to { i64, i64 }*
  %45 = getelementptr { i64, i64 }* %44, i32 0, i32 0
  %46 = extractvalue { i64, i64 } %call37, 0
  store i64 %46, i64* %45, align 1
  %47 = getelementptr { i64, i64 }* %44, i32 0, i32 1
  %48 = extractvalue { i64, i64 } %call37, 1
  store i64 %48, i64* %47, align 1
  %49 = load i64* %i27, align 8
  %arrayidx40 = getelementptr inbounds [100005 x %struct.abc]* @p2, i32 0, i64 %49
  %50 = bitcast %struct.abc* %agg.tmp39 to i8*
  %51 = bitcast %struct.abc* %arrayidx40 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %50, i8* %51, i64 16, i32 8, i1 false)
  %52 = load i64* @top, align 8
  %arrayidx42 = getelementptr inbounds [100005 x %struct.abc]* @q, i32 0, i64 %52
  %53 = bitcast %struct.abc* %agg.tmp41 to i8*
  %54 = bitcast %struct.abc* %arrayidx42 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %53, i8* %54, i64 16, i32 8, i1 false)
  %55 = bitcast %struct.abc* %agg.tmp39 to { i64, i64 }*
  %56 = getelementptr { i64, i64 }* %55, i32 0, i32 0
  %57 = load i64* %56, align 1
  %58 = getelementptr { i64, i64 }* %55, i32 0, i32 1
  %59 = load i64* %58, align 1
  %60 = bitcast %struct.abc* %agg.tmp41 to { i64, i64 }*
  %61 = getelementptr { i64, i64 }* %60, i32 0, i32 0
  %62 = load i64* %61, align 1
  %63 = getelementptr { i64, i64 }* %60, i32 0, i32 1
  %64 = load i64* %63, align 1
  %call43 = call { i64, i64 } @_Z7vectorr3abcS_(i64 %57, i64 %59, i64 %62, i64 %64)
  %65 = bitcast %struct.abc* %agg.tmp38 to { i64, i64 }*
  %66 = getelementptr { i64, i64 }* %65, i32 0, i32 0
  %67 = extractvalue { i64, i64 } %call43, 0
  store i64 %67, i64* %66, align 1
  %68 = getelementptr { i64, i64 }* %65, i32 0, i32 1
  %69 = extractvalue { i64, i64 } %call43, 1
  store i64 %69, i64* %68, align 1
  %70 = bitcast %struct.abc* %agg.tmp to { i64, i64 }*
  %71 = getelementptr { i64, i64 }* %70, i32 0, i32 0
  %72 = load i64* %71, align 1
  %73 = getelementptr { i64, i64 }* %70, i32 0, i32 1
  %74 = load i64* %73, align 1
  %75 = bitcast %struct.abc* %agg.tmp38 to { i64, i64 }*
  %76 = getelementptr { i64, i64 }* %75, i32 0, i32 0
  %77 = load i64* %76, align 1
  %78 = getelementptr { i64, i64 }* %75, i32 0, i32 1
  %79 = load i64* %78, align 1
  %call44 = call i64 @_Z5cross3abcS_(i64 %72, i64 %74, i64 %77, i64 %79)
  %cmp45 = icmp sge i64 %call44, 0
  br label %land.end

14
  %80 = phi i1 [ false, %while.cond ], [ %cmp45, %land.rhs ]
  br i1 %80, label %while.body, label %while.end

15
  %81 = load i64* @top, align 8
  %dec46 = add nsw i64 %81, -1
  store i64 %dec46, i64* @top, align 8
  br label %while.cond

16
  %82 = load i64* @top, align 8
  %inc47 = add nsw i64 %82, 1
  store i64 %inc47, i64* @top, align 8
  %arrayidx48 = getelementptr inbounds [100005 x %struct.abc]* @q, i32 0, i64 %inc47
  %83 = load i64* %i27, align 8
  %arrayidx49 = getelementptr inbounds [100005 x %struct.abc]* @p2, i32 0, i64 %83
  %84 = bitcast %struct.abc* %arrayidx48 to i8*
  %85 = bitcast %struct.abc* %arrayidx49 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %84, i8* %85, i64 16, i32 8, i1 false)
  %86 = load i64* %i27, align 8
  %inc51 = add nsw i64 %86, 1
  store i64 %inc51, i64* %i27, align 8
  br label %for.cond28

17
  %87 = load i64* @top, align 8
  %sub53 = sub nsw i64 %87, 1
  %call54 = call %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"* @_ZSt4cout, i64 %sub53)
  %call55 = call %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* %call54, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %88 = load i32* %retval
  ret i32 %88
