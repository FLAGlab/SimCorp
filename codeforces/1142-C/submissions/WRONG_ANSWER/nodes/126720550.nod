
1
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %x = alloca i64, align 8
  %y = alloca i64, align 8
  %top = alloca i64, align 8
  %i10 = alloca i32, align 4
  %agg.tmp = alloca %struct.node, align 8
  %agg.tmp20 = alloca %struct.node, align 8
  %agg.tmp23 = alloca %struct.node, align 8
  %i34 = alloca i32, align 4
  store i32 0, i32* %retval
  %call = call %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* @_ZSt3cin, i64* @n)
  store i32 1, i32* %i, align 4
  br label %for.cond

2
  %0 = load i32* %i, align 4
  %conv = sext i32 %0 to i64
  %1 = load i64* @n, align 8
  %cmp = icmp sle i64 %conv, %1
  br i1 %cmp, label %for.body, label %for.end

3
  %call1 = call %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* @_ZSt3cin, i64* %x)
  %call2 = call %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* %call1, i64* %y)
  %2 = load i64* %x, align 8
  %3 = load i32* %i, align 4
  %idxprom = sext i32 %3 to i64
  %arrayidx = getelementptr inbounds [1000010 x %struct.node]* @p, i32 0, i64 %idxprom
  %x3 = getelementptr inbounds %struct.node* %arrayidx, i32 0, i32 0
  store i64 %2, i64* %x3, align 8
  %4 = load i64* %y, align 8
  %5 = load i64* %x, align 8
  %6 = load i64* %x, align 8
  %mul = mul nsw i64 %5, %6
  %sub = sub nsw i64 %4, %mul
  %7 = load i32* %i, align 4
  %idxprom4 = sext i32 %7 to i64
  %arrayidx5 = getelementptr inbounds [1000010 x %struct.node]* @p, i32 0, i64 %idxprom4
  %y6 = getelementptr inbounds %struct.node* %arrayidx5, i32 0, i32 1
  store i64 %sub, i64* %y6, align 8
  %8 = load i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

4
  %9 = load i64* @n, align 8
  %add.ptr = getelementptr inbounds %struct.node* getelementptr inbounds ([1000010 x %struct.node]* @p, i32 0, i32 0), i64 %9
  %add.ptr7 = getelementptr inbounds %struct.node* %add.ptr, i64 1
  call void @_ZSt4sortIP4nodePFbS0_S0_EEvT_S4_T0_(%struct.node* getelementptr inbounds ([1000010 x %struct.node]* @p, i32 0, i64 1), %struct.node* %add.ptr7, i1 (i64, i64, i64, i64)* @_Z3cmp4nodeS_)
  store i64 0, i64* %top, align 8
  %10 = load i64* @n, align 8
  %11 = load i64* %top, align 8
  %inc8 = add nsw i64 %11, 1
  store i64 %inc8, i64* %top, align 8
  %arrayidx9 = getelementptr inbounds [1000010 x i64]* @q, i32 0, i64 %inc8
  store i64 %10, i64* %arrayidx9, align 8
  %12 = load i64* @n, align 8
  %sub11 = sub nsw i64 %12, 1
  %conv12 = trunc i64 %sub11 to i32
  store i32 %conv12, i32* %i10, align 4
  br label %for.cond13

5
  %13 = load i32* %i10, align 4
  %cmp14 = icmp sge i32 %13, 0
  br i1 %cmp14, label %for.body15, label %for.end33

6
  br label %while.cond

7
  %14 = load i64* %top, align 8
  %cmp16 = icmp sgt i64 %14, 1
  br i1 %cmp16, label %land.rhs, label %land.end

8
  %15 = load i64* %top, align 8
  %sub17 = sub nsw i64 %15, 1
  %arrayidx18 = getelementptr inbounds [1000010 x i64]* @q, i32 0, i64 %sub17
  %16 = load i64* %arrayidx18, align 8
  %arrayidx19 = getelementptr inbounds [1000010 x %struct.node]* @p, i32 0, i64 %16
  %17 = bitcast %struct.node* %agg.tmp to i8*
  %18 = bitcast %struct.node* %arrayidx19 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %17, i8* %18, i64 16, i32 8, i1 false)
  %19 = load i64* %top, align 8
  %arrayidx21 = getelementptr inbounds [1000010 x i64]* @q, i32 0, i64 %19
  %20 = load i64* %arrayidx21, align 8
  %arrayidx22 = getelementptr inbounds [1000010 x %struct.node]* @p, i32 0, i64 %20
  %21 = bitcast %struct.node* %agg.tmp20 to i8*
  %22 = bitcast %struct.node* %arrayidx22 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %21, i8* %22, i64 16, i32 8, i1 false)
  %23 = load i32* %i10, align 4
  %idxprom24 = sext i32 %23 to i64
  %arrayidx25 = getelementptr inbounds [1000010 x %struct.node]* @p, i32 0, i64 %idxprom24
  %24 = bitcast %struct.node* %agg.tmp23 to i8*
  %25 = bitcast %struct.node* %arrayidx25 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %24, i8* %25, i64 16, i32 8, i1 false)
  %26 = bitcast %struct.node* %agg.tmp to { i64, i64 }*
  %27 = getelementptr { i64, i64 }* %26, i32 0, i32 0
  %28 = load i64* %27, align 1
  %29 = getelementptr { i64, i64 }* %26, i32 0, i32 1
  %30 = load i64* %29, align 1
  %31 = bitcast %struct.node* %agg.tmp20 to { i64, i64 }*
  %32 = getelementptr { i64, i64 }* %31, i32 0, i32 0
  %33 = load i64* %32, align 1
  %34 = getelementptr { i64, i64 }* %31, i32 0, i32 1
  %35 = load i64* %34, align 1
  %36 = bitcast %struct.node* %agg.tmp23 to { i64, i64 }*
  %37 = getelementptr { i64, i64 }* %36, i32 0, i32 0
  %38 = load i64* %37, align 1
  %39 = getelementptr { i64, i64 }* %36, i32 0, i32 1
  %40 = load i64* %39, align 1
  %call26 = call i64 @_Z5cross4nodeS_S_(i64 %28, i64 %30, i64 %33, i64 %35, i64 %38, i64 %40)
  %cmp27 = icmp sle i64 %call26, 0
  br label %land.end

9
  %41 = phi i1 [ false, %while.cond ], [ %cmp27, %land.rhs ]
  br i1 %41, label %while.body, label %while.end

10
  %42 = load i64* %top, align 8
  %dec = add nsw i64 %42, -1
  store i64 %dec, i64* %top, align 8
  br label %while.cond

11
  %43 = load i32* %i10, align 4
  %conv28 = sext i32 %43 to i64
  %44 = load i64* %top, align 8
  %inc29 = add nsw i64 %44, 1
  store i64 %inc29, i64* %top, align 8
  %arrayidx30 = getelementptr inbounds [1000010 x i64]* @q, i32 0, i64 %inc29
  store i64 %conv28, i64* %arrayidx30, align 8
  %45 = load i32* %i10, align 4
  %dec32 = add nsw i32 %45, -1
  store i32 %dec32, i32* %i10, align 4
  br label %for.cond13

12
  store i32 1, i32* %i34, align 4
  br label %for.cond35

13
  %46 = load i32* %i34, align 4
  %conv36 = sext i32 %46 to i64
  %47 = load i64* %top, align 8
  %cmp37 = icmp slt i64 %conv36, %47
  br i1 %cmp37, label %for.body38, label %for.end51

14
  %48 = load i32* %i34, align 4
  %idxprom39 = sext i32 %48 to i64
  %arrayidx40 = getelementptr inbounds [1000010 x i64]* @q, i32 0, i64 %idxprom39
  %49 = load i64* %arrayidx40, align 8
  %arrayidx41 = getelementptr inbounds [1000010 x %struct.node]* @p, i32 0, i64 %49
  %x42 = getelementptr inbounds %struct.node* %arrayidx41, i32 0, i32 0
  %50 = load i64* %x42, align 8
  %51 = load i32* %i34, align 4
  %add = add nsw i32 %51, 1
  %idxprom43 = sext i32 %add to i64
  %arrayidx44 = getelementptr inbounds [1000010 x i64]* @q, i32 0, i64 %idxprom43
  %52 = load i64* %arrayidx44, align 8
  %arrayidx45 = getelementptr inbounds [1000010 x %struct.node]* @p, i32 0, i64 %52
  %x46 = getelementptr inbounds %struct.node* %arrayidx45, i32 0, i32 0
  %53 = load i64* %x46, align 8
  %cmp47 = icmp ne i64 %50, %53
  br i1 %cmp47, label %if.then, label %if.end

15
  %54 = load i64* @ans, align 8
  %inc48 = add nsw i64 %54, 1
  store i64 %inc48, i64* @ans, align 8
  br label %if.end

16
  %55 = load i32* %i34, align 4
  %inc50 = add nsw i32 %55, 1
  store i32 %inc50, i32* %i34, align 4
  br label %for.cond35

17
  %56 = load i64* @ans, align 8
  %call52 = call %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"* @_ZSt4cout, i64 %56)
  %57 = load i32* %retval
  ret i32 %57
