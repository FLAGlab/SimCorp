
1
  %retval = alloca i32, align 4
  %n = alloca i32, align 4
  %p = alloca %"class.std::vector", align 8
  %i = alloca i32, align 4
  %x = alloca i64, align 8
  %y = alloca i64, align 8
  %exn.slot = alloca i8*
  %ehselector.slot = alloca i32
  %ref.tmp = alloca %struct.point, align 8
  %ref.tmp8 = alloca %"class.std::vector", align 8
  %agg.tmp = alloca %"class.std::vector", align 8
  %ans = alloca i32, align 4
  %i13 = alloca i32, align 4
  %nx = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store i32 0, i32* %retval
  %call = call zeroext i1 @_ZNSt8ios_base15sync_with_stdioEb(i1 zeroext false)
  %vtable = load i8** bitcast (%"class.std::basic_istream"* @_ZSt3cin to i8**)
  %vbase.offset.ptr = getelementptr i8* %vtable, i64 -24
  %0 = bitcast i8* %vbase.offset.ptr to i64*
  %vbase.offset = load i64* %0
  %add.ptr = getelementptr inbounds i8* bitcast (%"class.std::basic_istream"* @_ZSt3cin to i8*), i64 %vbase.offset
  %1 = bitcast i8* %add.ptr to %"class.std::basic_ios"*
  %call1 = call %"class.std::basic_ostream"* @_ZNSt9basic_iosIcSt11char_traitsIcEE3tieEPSo(%"class.std::basic_ios"* %1, %"class.std::basic_ostream"* null)
  %call2 = call %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* @_ZSt3cin, i32* %n)
  call void @_ZNSt6vectorI5pointSaIS0_EEC1Ev(%"class.std::vector"* %p)
  store i32 1, i32* %i, align 4
  br label %for.cond

2
  %2 = load i32* %i, align 4
  %3 = load i32* %n, align 4
  %cmp = icmp sle i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

3
  %call3 = invoke %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* @_ZSt3cin, i64* %x)
          to label %invoke.cont unwind label %lpad

4
  %call5 = invoke %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* %call3, i64* %y)
          to label %invoke.cont4 unwind label %lpad

5
  %4 = load i64* %y, align 8
  %5 = load i64* %x, align 8
  %6 = load i64* %x, align 8
  %mul = mul nsw i64 %5, %6
  %sub = sub nsw i64 %4, %mul
  store i64 %sub, i64* %y, align 8
  %7 = load i64* %x, align 8
  %8 = load i64* %y, align 8
  invoke void @_ZN5pointC1Exx(%struct.point* %ref.tmp, i64 %7, i64 %8)
          to label %invoke.cont6 unwind label %lpad

6
  invoke void @_ZNSt6vectorI5pointSaIS0_EE9push_backEOS0_(%"class.std::vector"* %p, %struct.point* %ref.tmp)
          to label %invoke.cont7 unwind label %lpad

7
  %9 = load i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

8
  %10 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %11 = extractvalue { i8*, i32 } %10, 0
  store i8* %11, i8** %exn.slot
  %12 = extractvalue { i8*, i32 } %10, 1
  store i32 %12, i32* %ehselector.slot
  br label %ehcleanup

9
  invoke void @_ZNSt6vectorI5pointSaIS0_EEC1ERKS2_(%"class.std::vector"* %agg.tmp, %"class.std::vector"* %p)
          to label %invoke.cont9 unwind label %lpad

10
  invoke void @_Z5tubaoSt6vectorI5pointSaIS0_EE(%"class.std::vector"* sret %ref.tmp8, %"class.std::vector"* %agg.tmp)
          to label %invoke.cont11 unwind label %lpad10

11
  %call12 = call %"class.std::vector"* @_ZNSt6vectorI5pointSaIS0_EEaSEOS2_(%"class.std::vector"* %p, %"class.std::vector"* %ref.tmp8) #2
  call void @_ZNSt6vectorI5pointSaIS0_EED1Ev(%"class.std::vector"* %ref.tmp8) #2
  call void @_ZNSt6vectorI5pointSaIS0_EED1Ev(%"class.std::vector"* %agg.tmp) #2
  store i32 0, i32* %ans, align 4
  store i32 0, i32* %i13, align 4
  br label %for.cond14

12
  %13 = load i32* %i13, align 4
  %conv = sext i32 %13 to i64
  %call15 = call i64 @_ZNKSt6vectorI5pointSaIS0_EE4sizeEv(%"class.std::vector"* %p) #2
  %cmp16 = icmp ult i64 %conv, %call15
  br i1 %cmp16, label %for.body17, label %for.end33

13
  %14 = load i32* %i13, align 4
  %add = add nsw i32 %14, 1
  %conv18 = sext i32 %add to i64
  %call19 = call i64 @_ZNKSt6vectorI5pointSaIS0_EE4sizeEv(%"class.std::vector"* %p) #2
  %rem = urem i64 %conv18, %call19
  %conv20 = trunc i64 %rem to i32
  store i32 %conv20, i32* %nx, align 4
  %15 = load i32* %nx, align 4
  %conv21 = sext i32 %15 to i64
  %call23 = invoke %struct.point* @_ZNSt6vectorI5pointSaIS0_EEixEm(%"class.std::vector"* %p, i64 %conv21)
          to label %invoke.cont22 unwind label %lpad

14
  %x24 = getelementptr inbounds %struct.point* %call23, i32 0, i32 0
  %16 = load i64* %x24, align 8
  %17 = load i32* %i13, align 4
  %conv25 = sext i32 %17 to i64
  %call27 = invoke %struct.point* @_ZNSt6vectorI5pointSaIS0_EEixEm(%"class.std::vector"* %p, i64 %conv25)
          to label %invoke.cont26 unwind label %lpad

15
  %x28 = getelementptr inbounds %struct.point* %call27, i32 0, i32 0
  %18 = load i64* %x28, align 8
  %cmp29 = icmp slt i64 %16, %18
  br i1 %cmp29, label %if.then, label %if.end

16
  %19 = load i32* %ans, align 4
  %inc30 = add nsw i32 %19, 1
  store i32 %inc30, i32* %ans, align 4
  br label %if.end

17
  %20 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %21 = extractvalue { i8*, i32 } %20, 0
  store i8* %21, i8** %exn.slot
  %22 = extractvalue { i8*, i32 } %20, 1
  store i32 %22, i32* %ehselector.slot
  call void @_ZNSt6vectorI5pointSaIS0_EED1Ev(%"class.std::vector"* %agg.tmp) #2
  br label %ehcleanup

18
  %23 = load i32* %i13, align 4
  %inc32 = add nsw i32 %23, 1
  store i32 %inc32, i32* %i13, align 4
  br label %for.cond14

19
  %24 = load i32* %ans, align 4
  %call35 = invoke %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* @_ZSt4cout, i32 %24)
          to label %invoke.cont34 unwind label %lpad

20
  %call37 = invoke %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c(%"class.std::basic_ostream"* %call35, i8 signext 10)
          to label %invoke.cont36 unwind label %lpad

21
  store i32 1, i32* %retval
  store i32 1, i32* %cleanup.dest.slot
  call void @_ZNSt6vectorI5pointSaIS0_EED1Ev(%"class.std::vector"* %p) #2
  %25 = load i32* %retval
  ret i32 %25

22
  call void @_ZNSt6vectorI5pointSaIS0_EED1Ev(%"class.std::vector"* %p) #2
  %exn = load i8** %exn.slot
  %sel = load i32* %ehselector.slot
  %lpad.val = insertvalue { i8*, i32 } undef, i8* %exn, 0
  %lpad.val38 = insertvalue { i8*, i32 } %lpad.val, i32 %sel, 1
  resume { i8*, i32 } %lpad.val38
