
1
  %retval = alloca i32, align 4
  store i32 0, i32* %retval
  %call = call i32 (i8*, ...)* @scanf(i8* getelementptr inbounds ([3 x i8]* @.str, i32 0, i32 0), i32* @T)
  br label %for.cond

2
  %0 = load i32* @T, align 4
  %dec = add nsw i32 %0, -1
  store i32 %dec, i32* @T, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %for.body, label %for.end15

3
  %call1 = call i32 (i8*, ...)* @scanf(i8* getelementptr inbounds ([3 x i8]* @.str1, i32 0, i32 0), i8* getelementptr inbounds ([100005 x i8]* @st, i32 0, i32 0))
  %call2 = call i64 @strlen(i8* getelementptr inbounds ([100005 x i8]* @st, i32 0, i32 0)) #5
  %conv = trunc i64 %call2 to i32
  store i32 %conv, i32* @n, align 4
  store i32 0, i32* @s, align 4
  store i32 0, i32* @t, align 4
  store i32 0, i32* @i, align 4
  br label %for.cond3

4
  %1 = load i32* @i, align 4
  %2 = load i32* @n, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body4, label %for.end

5
  %3 = load i32* @i, align 4
  %idxprom = sext i32 %3 to i64
  %arrayidx = getelementptr inbounds [100005 x i8]* @st, i32 0, i64 %idxprom
  %4 = load i8* %arrayidx, align 1
  %conv5 = sext i8 %4 to i32
  %cmp6 = icmp eq i32 %conv5, 66
  br i1 %cmp6, label %if.then, label %if.else

6
  %5 = load i32* @s, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* @s, align 4
  br label %if.end

7
  %6 = load i32* @t, align 4
  %inc7 = add nsw i32 %6, 1
  store i32 %inc7, i32* @t, align 4
  br label %if.end

8
  %7 = load i32* @i, align 4
  %inc8 = add nsw i32 %7, 1
  store i32 %inc8, i32* @i, align 4
  br label %for.cond3

9
  %8 = load i32* @s, align 4
  %9 = load i32* @t, align 4
  %cmp9 = icmp eq i32 %8, %9
  br i1 %cmp9, label %if.then10, label %if.else12

10
  %call11 = call i32 @puts(i8* getelementptr inbounds ([4 x i8]* @.str2, i32 0, i32 0))
  br label %if.end14

11
  %call13 = call i32 @puts(i8* getelementptr inbounds ([3 x i8]* @.str3, i32 0, i32 0))
  br label %if.end14

12
  br label %for.cond

13
  %10 = load i32* %retval
  ret i32 %10
