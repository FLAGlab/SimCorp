
1
  %retval = alloca i32, align 4
  %t = alloca i32, align 4
  %s = alloca %"class.std::basic_string", align 8
  %exn.slot = alloca i8*
  %ehselector.slot = alloca i32
  %len = alloca i32, align 4
  %sum = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval
  %call = call %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* @_ZSt3cin, i32* %t)
  br label %while.cond

2
  %0 = load i32* %t, align 4
  %dec = add nsw i32 %0, -1
  store i32 %dec, i32* %t, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %while.body, label %while.end

3
  call void @_ZNSsC1Ev(%"class.std::basic_string"* %s)
  %call1 = invoke %"class.std::basic_istream"* @_ZStrsIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RSbIS4_S5_T1_E(%"class.std::basic_istream"* @_ZSt3cin, %"class.std::basic_string"* %s)
          to label %invoke.cont unwind label %lpad

4
  %call2 = call i64 @_ZNKSs6lengthEv(%"class.std::basic_string"* %s) #2
  %conv = trunc i64 %call2 to i32
  store i32 %conv, i32* %len, align 4
  store i32 0, i32* %sum, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

5
  %1 = load i32* %i, align 4
  %2 = load i32* %len, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

6
  %3 = load i32* %i, align 4
  %conv3 = sext i32 %3 to i64
  %call5 = invoke i8* @_ZNSsixEm(%"class.std::basic_string"* %s, i64 %conv3)
          to label %invoke.cont4 unwind label %lpad

7
  %4 = load i8* %call5
  %conv6 = sext i8 %4 to i32
  %cmp7 = icmp eq i32 %conv6, 65
  br i1 %cmp7, label %if.then, label %lor.lhs.false

8
  %5 = load i32* %i, align 4
  %conv8 = sext i32 %5 to i64
  %call10 = invoke i8* @_ZNSsixEm(%"class.std::basic_string"* %s, i64 %conv8)
          to label %invoke.cont9 unwind label %lpad

9
  %6 = load i8* %call10
  %conv11 = sext i8 %6 to i32
  %cmp12 = icmp eq i32 %conv11, 67
  br i1 %cmp12, label %if.then, label %if.else

10
  %7 = load i32* %sum, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %sum, align 4
  br label %if.end

11
  %8 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %9 = extractvalue { i8*, i32 } %8, 0
  store i8* %9, i8** %exn.slot
  %10 = extractvalue { i8*, i32 } %8, 1
  store i32 %10, i32* %ehselector.slot
  call void @_ZNSsD1Ev(%"class.std::basic_string"* %s) #2
  %exn = load i8** %exn.slot
  %sel = load i32* %ehselector.slot
  %lpad.val = insertvalue { i8*, i32 } undef, i8* %exn, 0
  %lpad.val23 = insertvalue { i8*, i32 } %lpad.val, i32 %sel, 1
  resume { i8*, i32 } %lpad.val23

12
  %11 = load i32* %sum, align 4
  %dec13 = add nsw i32 %11, -1
  store i32 %dec13, i32* %sum, align 4
  br label %if.end

13
  %12 = load i32* %i, align 4
  %inc14 = add nsw i32 %12, 1
  store i32 %inc14, i32* %i, align 4
  br label %for.cond

14
  %13 = load i32* %sum, align 4
  %tobool15 = icmp ne i32 %13, 0
  br i1 %tobool15, label %if.then16, label %if.else19

15
  %call18 = invoke i32 @puts(i8* getelementptr inbounds ([3 x i8]* @.str, i32 0, i32 0))
          to label %invoke.cont17 unwind label %lpad

16
  br label %if.end22

17
  %call21 = invoke i32 @puts(i8* getelementptr inbounds ([4 x i8]* @.str1, i32 0, i32 0))
          to label %invoke.cont20 unwind label %lpad

18
  br label %if.end22

19
  call void @_ZNSsD1Ev(%"class.std::basic_string"* %s) #2
  br label %while.cond

20
  %14 = load i32* %retval
  ret i32 %14
