
1
  %retval = alloca i32, align 4
  %t = alloca i32, align 4
  %n = alloca i8, align 1
  %m = alloca [100 x i32], align 16
  store i32 0, i32* %retval
  %call = call i32 (i8*, ...)* @scanf(i8* getelementptr inbounds ([3 x i8]* @.str, i32 0, i32 0), i32* %t)
  %call1 = call i32 @getchar()
  br label %while.cond

2
  %0 = load i32* %t, align 4
  %dec = add nsw i32 %0, -1
  store i32 %dec, i32* %t, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %while.body, label %while.end14

3
  %1 = bitcast [100 x i32]* %m to i8*
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 400, i32 16, i1 false)
  %call2 = call i32 @getchar()
  %conv = trunc i32 %call2 to i8
  store i8 %conv, i8* %n, align 1
  br label %while.cond3

4
  %2 = load i8* %n, align 1
  %conv4 = sext i8 %2 to i32
  %cmp = icmp ne i32 %conv4, 10
  br i1 %cmp, label %while.body5, label %while.end

5
  %3 = load i8* %n, align 1
  %idxprom = sext i8 %3 to i64
  %arrayidx = getelementptr inbounds [100 x i32]* %m, i32 0, i64 %idxprom
  %4 = load i32* %arrayidx, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %arrayidx, align 4
  %call6 = call i32 @getchar()
  %conv7 = trunc i32 %call6 to i8
  store i8 %conv7, i8* %n, align 1
  br label %while.cond3

6
  %arrayidx8 = getelementptr inbounds [100 x i32]* %m, i32 0, i64 65
  %5 = load i32* %arrayidx8, align 4
  %arrayidx9 = getelementptr inbounds [100 x i32]* %m, i32 0, i64 67
  %6 = load i32* %arrayidx9, align 4
  %add = add nsw i32 %5, %6
  %arrayidx10 = getelementptr inbounds [100 x i32]* %m, i32 0, i64 66
  %7 = load i32* %arrayidx10, align 4
  %cmp11 = icmp eq i32 %add, %7
  br i1 %cmp11, label %if.then, label %if.else

7
  %call12 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0))
  br label %if.end

8
  %call13 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([5 x i8]* @.str2, i32 0, i32 0))
  br label %if.end

9
  br label %while.cond

10
  %8 = load i32* %retval
  ret i32 %8
