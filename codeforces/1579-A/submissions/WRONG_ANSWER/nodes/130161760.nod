
1
  %retval = alloca i32, align 4
  store i32 0, i32* %retval
  %call = call %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* @_ZSt3cin, i32* @n)
  store i32 0, i32* @i, align 4
  br label %for.cond

2
  %0 = load i32* @i, align 4
  %1 = load i32* @n, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end20

3
  %call1 = call %"class.std::basic_istream"* @_ZStrsIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RSbIS4_S5_T1_E(%"class.std::basic_istream"* @_ZSt3cin, %"class.std::basic_string"* @s)
  store i32 0, i32* @x, align 4
  store i32 0, i32* @x1, align 4
  store i32 0, i32* @o, align 4
  br label %for.cond2

4
  %2 = load i32* @o, align 4
  %conv = sext i32 %2 to i64
  %call3 = call i64 @_ZNKSs4sizeEv(%"class.std::basic_string"* @s) #2
  %cmp4 = icmp ult i64 %conv, %call3
  br i1 %cmp4, label %for.body5, label %for.end

5
  %3 = load i32* @o, align 4
  %conv6 = sext i32 %3 to i64
  %call7 = call i8* @_ZNSsixEm(%"class.std::basic_string"* @s, i64 %conv6)
  %4 = load i8* %call7
  %conv8 = sext i8 %4 to i32
  %cmp9 = icmp eq i32 %conv8, 66
  br i1 %cmp9, label %if.then, label %if.else

6
  %5 = load i32* @x, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* @x, align 4
  br label %if.end

7
  %6 = load i32* @x1, align 4
  %inc10 = add nsw i32 %6, 1
  store i32 %inc10, i32* @x1, align 4
  br label %if.end

8
  %7 = load i32* @o, align 4
  %inc11 = add nsw i32 %7, 1
  store i32 %inc11, i32* @o, align 4
  br label %for.cond2

9
  %8 = load i32* @x, align 4
  %9 = load i32* @x1, align 4
  %cmp12 = icmp eq i32 %8, %9
  br i1 %cmp12, label %if.then13, label %if.else15

10
  %call14 = call %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* @_ZSt4cout, i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0))
  br label %if.end17

11
  %call16 = call %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* @_ZSt4cout, i8* getelementptr inbounds ([3 x i8]* @.str2, i32 0, i32 0))
  br label %if.end17

12
  %10 = load i32* @i, align 4
  %inc19 = add nsw i32 %10, 1
  store i32 %inc19, i32* @i, align 4
  br label %for.cond

13
  %11 = load i32* %retval
  ret i32 %11
