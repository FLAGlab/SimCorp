
1
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval
  %call = call i32 (i8*, ...)* @scanf(i8* getelementptr inbounds ([3 x i8]* @.str, i32 0, i32 0), i32* @t)
  br label %while.cond

2
  %0 = load i32* @t, align 4
  %dec = add nsw i32 %0, -1
  store i32 %dec, i32* @t, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %while.body, label %while.end

3
  store i32 0, i32* @tot, align 4
  %call1 = call i32 (i8*, ...)* @scanf(i8* getelementptr inbounds ([3 x i8]* @.str1, i32 0, i32 0), i8* getelementptr inbounds ([60 x i8]* @c, i32 0, i64 1))
  %call2 = call i64 @strlen(i8* getelementptr inbounds ([60 x i8]* @c, i32 0, i64 1)) #5
  %conv = trunc i64 %call2 to i32
  store i32 %conv, i32* @len, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

4
  %1 = load i32* %i, align 4
  %2 = load i32* @len, align 4
  %cmp = icmp sle i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

5
  %3 = load i32* %i, align 4
  %idxprom = sext i32 %3 to i64
  %arrayidx = getelementptr inbounds [60 x i8]* @c, i32 0, i64 %idxprom
  %4 = load i8* %arrayidx, align 1
  %conv3 = sext i8 %4 to i32
  %cmp4 = icmp eq i32 %conv3, 66
  br i1 %cmp4, label %if.then, label %if.end

6
  %5 = load i32* @tot, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* @tot, align 4
  br label %if.end

7
  %6 = load i32* %i, align 4
  %inc5 = add nsw i32 %6, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

8
  %7 = load i32* @tot, align 4
  %8 = load i32* @len, align 4
  %div = sdiv i32 %8, 2
  %cmp6 = icmp eq i32 %7, %div
  br i1 %cmp6, label %if.then7, label %if.else

9
  %call8 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([5 x i8]* @.str2, i32 0, i32 0))
  br label %if.end10

10
  %call9 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str3, i32 0, i32 0))
  br label %if.end10

11
  br label %while.cond

12
  ret i32 0
