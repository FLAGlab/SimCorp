
1
  %retval = alloca i32, align 4
  %N = alloca i32, align 4
  %i = alloca i32, align 4
  %S = alloca [5 x i8], align 1
  %LENTH = alloca i32, align 4
  %A = alloca i32, align 4
  %B = alloca i32, align 4
  %C = alloca i32, align 4
  store i32 0, i32* %retval
  %call = call i32 (i8*, ...)* @scanf(i8* getelementptr inbounds ([3 x i8]* @.str, i32 0, i32 0), i32* %N)
  br label %while.cond

2
  %0 = load i32* %N, align 4
  %dec = add nsw i32 %0, -1
  store i32 %dec, i32* %N, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %while.body, label %while.end

3
  %1 = bitcast [5 x i8]* %S to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %1, i8* getelementptr inbounds ([5 x i8]* @_ZZ4mainE1S, i32 0, i32 0), i64 5, i32 1, i1 false)
  %arraydecay = getelementptr inbounds [5 x i8]* %S, i32 0, i32 0
  %call1 = call i32 (i8*, ...)* @scanf(i8* getelementptr inbounds ([3 x i8]* @.str1, i32 0, i32 0), i8* %arraydecay)
  store i32 0, i32* %LENTH, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

4
  %2 = load i32* %i, align 4
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds [5 x i8]* %S, i32 0, i64 %idxprom
  %3 = load i8* %arrayidx, align 1
  %conv = sext i8 %3 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %for.body, label %for.end

5
  %4 = load i32* %LENTH, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %LENTH, align 4
  %5 = load i32* %i, align 4
  %inc2 = add nsw i32 %5, 1
  store i32 %inc2, i32* %i, align 4
  br label %for.cond

6
  store i32 0, i32* %A, align 4
  store i32 0, i32* %B, align 4
  store i32 0, i32* %C, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond3

7
  %6 = load i32* %i, align 4
  %7 = load i32* %LENTH, align 4
  %cmp4 = icmp slt i32 %6, %7
  br i1 %cmp4, label %for.body5, label %for.end27

8
  %8 = load i32* %i, align 4
  %idxprom6 = sext i32 %8 to i64
  %arrayidx7 = getelementptr inbounds [5 x i8]* %S, i32 0, i64 %idxprom6
  %9 = load i8* %arrayidx7, align 1
  %conv8 = sext i8 %9 to i32
  %cmp9 = icmp eq i32 %conv8, 65
  br i1 %cmp9, label %if.then, label %if.end

9
  %10 = load i32* %A, align 4
  %inc10 = add nsw i32 %10, 1
  store i32 %inc10, i32* %A, align 4
  br label %if.end

10
  %11 = load i32* %i, align 4
  %idxprom11 = sext i32 %11 to i64
  %arrayidx12 = getelementptr inbounds [5 x i8]* %S, i32 0, i64 %idxprom11
  %12 = load i8* %arrayidx12, align 1
  %conv13 = sext i8 %12 to i32
  %cmp14 = icmp eq i32 %conv13, 66
  br i1 %cmp14, label %if.then15, label %if.end17

11
  %13 = load i32* %B, align 4
  %inc16 = add nsw i32 %13, 1
  store i32 %inc16, i32* %B, align 4
  br label %if.end17

12
  %14 = load i32* %i, align 4
  %idxprom18 = sext i32 %14 to i64
  %arrayidx19 = getelementptr inbounds [5 x i8]* %S, i32 0, i64 %idxprom18
  %15 = load i8* %arrayidx19, align 1
  %conv20 = sext i8 %15 to i32
  %cmp21 = icmp eq i32 %conv20, 67
  br i1 %cmp21, label %if.then22, label %if.end24

13
  %16 = load i32* %C, align 4
  %inc23 = add nsw i32 %16, 1
  store i32 %inc23, i32* %C, align 4
  br label %if.end24

14
  %17 = load i32* %i, align 4
  %inc26 = add nsw i32 %17, 1
  store i32 %inc26, i32* %i, align 4
  br label %for.cond3

15
  %18 = load i32* %B, align 4
  %19 = load i32* %A, align 4
  %20 = load i32* %C, align 4
  %add = add nsw i32 %19, %20
  %cmp28 = icmp eq i32 %18, %add
  br i1 %cmp28, label %if.then29, label %if.else

16
  %call30 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([6 x i8]* @.str2, i32 0, i32 0))
  br label %if.end32

17
  %call31 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([5 x i8]* @.str3, i32 0, i32 0))
  br label %if.end32

18
  br label %while.cond

19
  ret i32 0
