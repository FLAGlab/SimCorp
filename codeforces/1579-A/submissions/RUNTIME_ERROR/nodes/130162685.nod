
1
  %retval = alloca i32, align 4
  %t = alloca i32, align 4
  %m = alloca i32, align 4
  %s = alloca [20 x i8], align 16
  %c1 = alloca i32, align 4
  %c2 = alloca i32, align 4
  %c3 = alloca i32, align 4
  %len1 = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval
  %call = call i32 (i8*, ...)* @scanf(i8* getelementptr inbounds ([3 x i8]* @.str, i32 0, i32 0), i32* %t)
  store i32 0, i32* %m, align 4
  br label %for.cond

2
  %0 = load i32* %m, align 4
  %1 = load i32* %t, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end31

3
  %arraydecay = getelementptr inbounds [20 x i8]* %s, i32 0, i32 0
  %call1 = call i32 (i8*, ...)* @scanf(i8* getelementptr inbounds ([3 x i8]* @.str1, i32 0, i32 0), i8* %arraydecay)
  store i32 0, i32* %c1, align 4
  store i32 0, i32* %c2, align 4
  store i32 0, i32* %c3, align 4
  %arraydecay2 = getelementptr inbounds [20 x i8]* %s, i32 0, i32 0
  %call3 = call i64 @strlen(i8* %arraydecay2) #5
  %conv = trunc i64 %call3 to i32
  store i32 %conv, i32* %len1, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond4

4
  %2 = load i32* %i, align 4
  %3 = load i32* %len1, align 4
  %cmp5 = icmp slt i32 %2, %3
  br i1 %cmp5, label %for.body6, label %for.end

5
  %4 = load i32* %i, align 4
  %idxprom = sext i32 %4 to i64
  %arrayidx = getelementptr inbounds [20 x i8]* %s, i32 0, i64 %idxprom
  %5 = load i8* %arrayidx, align 1
  %conv7 = sext i8 %5 to i32
  %cmp8 = icmp eq i32 %conv7, 65
  br i1 %cmp8, label %if.then, label %if.end

6
  %6 = load i32* %c1, align 4
  %add = add nsw i32 %6, 1
  store i32 %add, i32* %c1, align 4
  br label %if.end

7
  %7 = load i32* %i, align 4
  %idxprom9 = sext i32 %7 to i64
  %arrayidx10 = getelementptr inbounds [20 x i8]* %s, i32 0, i64 %idxprom9
  %8 = load i8* %arrayidx10, align 1
  %conv11 = sext i8 %8 to i32
  %cmp12 = icmp eq i32 %conv11, 66
  br i1 %cmp12, label %if.then13, label %if.end15

8
  %9 = load i32* %c2, align 4
  %add14 = add nsw i32 %9, 1
  store i32 %add14, i32* %c2, align 4
  br label %if.end15

9
  %10 = load i32* %i, align 4
  %idxprom16 = sext i32 %10 to i64
  %arrayidx17 = getelementptr inbounds [20 x i8]* %s, i32 0, i64 %idxprom16
  %11 = load i8* %arrayidx17, align 1
  %conv18 = sext i8 %11 to i32
  %cmp19 = icmp eq i32 %conv18, 67
  br i1 %cmp19, label %if.then20, label %if.end22

10
  %12 = load i32* %c3, align 4
  %add21 = add nsw i32 %12, 1
  store i32 %add21, i32* %c3, align 4
  br label %if.end22

11
  %13 = load i32* %i, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond4

12
  %14 = load i32* %c1, align 4
  %15 = load i32* %c3, align 4
  %add23 = add nsw i32 %14, %15
  %16 = load i32* %c2, align 4
  %cmp24 = icmp eq i32 %add23, %16
  br i1 %cmp24, label %if.then25, label %if.else

13
  %call26 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([5 x i8]* @.str2, i32 0, i32 0))
  br label %if.end28

14
  %call27 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str3, i32 0, i32 0))
  br label %if.end28

15
  %17 = load i32* %m, align 4
  %inc30 = add nsw i32 %17, 1
  store i32 %inc30, i32* %m, align 4
  br label %for.cond

16
  %18 = load i32* %retval
  ret i32 %18
