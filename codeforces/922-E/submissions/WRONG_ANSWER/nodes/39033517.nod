
1
  %retval = alloca i32, align 4
  %n = alloca i32, align 4
  %w = alloca i32, align 4
  %b = alloca i32, align 4
  %x = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %c = alloca [1005 x i32], align 16
  %cost = alloca [1005 x i32], align 16
  %cnt = alloca i64, align 8
  %ref.tmp = alloca i64, align 8
  %ref.tmp41 = alloca i64, align 8
  %ref.tmp47 = alloca i64, align 8
  %ref.tmp55 = alloca i64, align 8
  store i32 0, i32* %retval
  %call = call %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* @_ZSt3cin, i32* %n)
  %call1 = call %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* %call, i32* %w)
  %call2 = call %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* %call1, i32* %b)
  %call3 = call %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* %call2, i32* %x)
  call void @llvm.memset.p0i8.i64(i8* bitcast ([10005 x i64]* @f to i8*), i8 -128, i64 80040, i32 16, i1 false)
  store i32 1, i32* %i, align 4
  br label %for.cond

2
  %0 = load i32* %i, align 4
  %1 = load i32* %n, align 4
  %cmp = icmp sle i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

3
  %2 = load i32* %i, align 4
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds [1005 x i32]* %c, i32 0, i64 %idxprom
  %call4 = call i32 (i8*, ...)* @scanf(i8* getelementptr inbounds ([3 x i8]* @.str, i32 0, i32 0), i32* %arrayidx)
  %3 = load i32* %i, align 4
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

4
  store i32 1, i32* %i, align 4
  br label %for.cond5

5
  %4 = load i32* %i, align 4
  %5 = load i32* %n, align 4
  %cmp6 = icmp sle i32 %4, %5
  br i1 %cmp6, label %for.body7, label %for.end13

6
  %6 = load i32* %i, align 4
  %idxprom8 = sext i32 %6 to i64
  %arrayidx9 = getelementptr inbounds [1005 x i32]* %cost, i32 0, i64 %idxprom8
  %call10 = call i32 (i8*, ...)* @scanf(i8* getelementptr inbounds ([3 x i8]* @.str, i32 0, i32 0), i32* %arrayidx9)
  %7 = load i32* %i, align 4
  %inc12 = add nsw i32 %7, 1
  store i32 %inc12, i32* %i, align 4
  br label %for.cond5

7
  %8 = load i32* %w, align 4
  %conv = sext i32 %8 to i64
  store i64 %conv, i64* getelementptr inbounds ([10005 x i64]* @f, i32 0, i64 0), align 8
  store i64 0, i64* %cnt, align 8
  store i32 1, i32* %i, align 4
  br label %for.cond14

8
  %9 = load i32* %i, align 4
  %10 = load i32* %n, align 4
  %cmp15 = icmp sle i32 %9, %10
  br i1 %cmp15, label %for.body16, label %for.end64

9
  %11 = load i64* %cnt, align 8
  %conv17 = trunc i64 %11 to i32
  store i32 %conv17, i32* %j, align 4
  br label %for.cond18

10
  %12 = load i32* %j, align 4
  %neg = xor i32 %12, -1
  %tobool = icmp ne i32 %neg, 0
  br i1 %tobool, label %for.body19, label %for.end61

11
  store i32 0, i32* %k, align 4
  br label %for.cond20

12
  %13 = load i32* %j, align 4
  %idxprom21 = sext i32 %13 to i64
  %arrayidx22 = getelementptr inbounds [10005 x i64]* @f, i32 0, i64 %idxprom21
  %14 = load i64* %arrayidx22, align 8
  %15 = load i32* %k, align 4
  %16 = load i32* %i, align 4
  %idxprom23 = sext i32 %16 to i64
  %arrayidx24 = getelementptr inbounds [1005 x i32]* %cost, i32 0, i64 %idxprom23
  %17 = load i32* %arrayidx24, align 4
  %mul = mul nsw i32 %15, %17
  %conv25 = sext i32 %mul to i64
  %cmp26 = icmp sge i64 %14, %conv25
  br i1 %cmp26, label %land.rhs, label %land.end

13
  %18 = load i32* %k, align 4
  %19 = load i32* %i, align 4
  %idxprom27 = sext i32 %19 to i64
  %arrayidx28 = getelementptr inbounds [1005 x i32]* %c, i32 0, i64 %idxprom27
  %20 = load i32* %arrayidx28, align 4
  %cmp29 = icmp sle i32 %18, %20
  br label %land.end

14
  %21 = phi i1 [ false, %for.cond20 ], [ %cmp29, %land.rhs ]
  br i1 %21, label %for.body30, label %for.end59

15
  %22 = load i32* %j, align 4
  %23 = load i32* %k, align 4
  %add = add nsw i32 %22, %23
  %idxprom31 = sext i32 %add to i64
  %arrayidx32 = getelementptr inbounds [10005 x i64]* @f, i32 0, i64 %idxprom31
  %24 = load i32* %j, align 4
  %idxprom33 = sext i32 %24 to i64
  %arrayidx34 = getelementptr inbounds [10005 x i64]* @f, i32 0, i64 %idxprom33
  %25 = load i64* %arrayidx34, align 8
  %26 = load i32* %x, align 4
  %conv35 = sext i32 %26 to i64
  %add36 = add nsw i64 %25, %conv35
  store i64 %add36, i64* %ref.tmp, align 8
  %27 = load i32* %w, align 4
  %conv37 = sext i32 %27 to i64
  %28 = load i32* %j, align 4
  %29 = load i32* %b, align 4
  %mul38 = mul nsw i32 %28, %29
  %conv39 = sext i32 %mul38 to i64
  %add40 = add nsw i64 %conv37, %conv39
  store i64 %add40, i64* %ref.tmp41, align 8
  %call42 = call i64* @_ZSt3minIxERKT_S2_S2_(i64* %ref.tmp, i64* %ref.tmp41)
  %30 = load i64* %call42
  %31 = load i32* %i, align 4
  %idxprom43 = sext i32 %31 to i64
  %arrayidx44 = getelementptr inbounds [1005 x i32]* %cost, i32 0, i64 %idxprom43
  %32 = load i32* %arrayidx44, align 4
  %33 = load i32* %k, align 4
  %mul45 = mul nsw i32 %32, %33
  %conv46 = sext i32 %mul45 to i64
  %sub = sub nsw i64 %30, %conv46
  store i64 %sub, i64* %ref.tmp47, align 8
  %call48 = call i64* @_ZSt3maxIxERKT_S2_S2_(i64* %arrayidx32, i64* %ref.tmp47)
  %34 = load i64* %call48
  %35 = load i32* %j, align 4
  %36 = load i32* %k, align 4
  %add49 = add nsw i32 %35, %36
  %idxprom50 = sext i32 %add49 to i64
  %arrayidx51 = getelementptr inbounds [10005 x i64]* @f, i32 0, i64 %idxprom50
  store i64 %34, i64* %arrayidx51, align 8
  %37 = load i32* %j, align 4
  %conv52 = sext i32 %37 to i64
  %38 = load i32* %k, align 4
  %conv53 = sext i32 %38 to i64
  %add54 = add nsw i64 %conv52, %conv53
  store i64 %add54, i64* %ref.tmp55, align 8
  %call56 = call i64* @_ZSt3maxIxERKT_S2_S2_(i64* %cnt, i64* %ref.tmp55)
  %39 = load i64* %call56
  store i64 %39, i64* %cnt, align 8
  %40 = load i32* %k, align 4
  %inc58 = add nsw i32 %40, 1
  store i32 %inc58, i32* %k, align 4
  br label %for.cond20

16
  %41 = load i32* %j, align 4
  %dec = add nsw i32 %41, -1
  store i32 %dec, i32* %j, align 4
  br label %for.cond18

17
  %42 = load i32* %i, align 4
  %inc63 = add nsw i32 %42, 1
  store i32 %inc63, i32* %i, align 4
  br label %for.cond14

18
  %43 = load i64* %cnt, align 8
  %call65 = call %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"* @_ZSt4cout, i64 %43)
  %call66 = call %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* %call65, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0
