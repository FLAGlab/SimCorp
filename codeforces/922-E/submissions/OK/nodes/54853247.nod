
1
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %i5 = alloca i32, align 4
  %ref.tmp = alloca i32, align 4
  %i16 = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %ref.tmp59 = alloca i64, align 8
  %ref.tmp64 = alloca i64, align 8
  %j82 = alloca i64, align 8
  store i32 0, i32* %retval
  %call = call %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* @_ZSt3cin, i64* @n)
  %call1 = call %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* %call, i64* @initial)
  %call2 = call %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* %call1, i64* @cap_increase)
  %call3 = call %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* %call2, i64* @x)
  store i32 0, i32* %i, align 4
  br label %for.cond

2
  %0 = load i32* %i, align 4
  %conv = sext i32 %0 to i64
  %1 = load i64* @n, align 8
  %cmp = icmp slt i64 %conv, %1
  br i1 %cmp, label %for.body, label %for.end

3
  %2 = load i32* %i, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* %i, align 4
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds [1005 x i64]* @a, i32 0, i64 %idxprom
  %call4 = call %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* @_ZSt3cin, i64* %arrayidx)
  br label %for.cond

4
  store i32 0, i32* %i5, align 4
  br label %for.cond6

5
  %3 = load i32* %i5, align 4
  %conv7 = sext i32 %3 to i64
  %4 = load i64* @n, align 8
  %cmp8 = icmp slt i64 %conv7, %4
  br i1 %cmp8, label %for.body9, label %for.end15

6
  %5 = load i32* %i5, align 4
  %inc11 = add nsw i32 %5, 1
  store i32 %inc11, i32* %i5, align 4
  %idxprom12 = sext i32 %5 to i64
  %arrayidx13 = getelementptr inbounds [1005 x i64]* @cost, i32 0, i64 %idxprom12
  %call14 = call %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* @_ZSt3cin, i64* %arrayidx13)
  br label %for.cond6

7
  store i32 -1, i32* %ref.tmp, align 4
  call void @_ZSt4fillIPxiEvT_S1_RKT0_(i64* getelementptr inbounds ([1005 x [10005 x i64]]* @dp, i32 0, i64 0, i64 1), i64* getelementptr inbounds ([1005 x [10005 x i64]]* @dp, i64 1, i64 0, i64 0), i32* %ref.tmp)
  %6 = load i64* @initial, align 8
  store i64 %6, i64* getelementptr inbounds ([1005 x [10005 x i64]]* @dp, i32 0, i64 0, i64 0), align 8
  store i32 0, i32* %i16, align 4
  br label %for.cond17

8
  %7 = load i32* %i16, align 4
  %conv18 = sext i32 %7 to i64
  %8 = load i64* @n, align 8
  %cmp19 = icmp slt i64 %conv18, %8
  br i1 %cmp19, label %for.body20, label %for.end81

9
  store i32 0, i32* %j, align 4
  br label %for.cond21

10
  %9 = load i32* %j, align 4
  %cmp22 = icmp slt i32 %9, 10005
  br i1 %cmp22, label %land.rhs, label %land.end

11
  %10 = load i32* %j, align 4
  %idxprom23 = sext i32 %10 to i64
  %11 = load i32* %i16, align 4
  %idxprom24 = sext i32 %11 to i64
  %arrayidx25 = getelementptr inbounds [1005 x [10005 x i64]]* @dp, i32 0, i64 %idxprom24
  %arrayidx26 = getelementptr inbounds [10005 x i64]* %arrayidx25, i32 0, i64 %idxprom23
  %12 = load i64* %arrayidx26, align 8
  %cmp27 = icmp sge i64 %12, 0
  br label %land.end

12
  %13 = phi i1 [ false, %for.cond21 ], [ %cmp27, %land.rhs ]
  br i1 %13, label %for.body28, label %for.end78

13
  store i32 0, i32* %k, align 4
  br label %for.cond29

14
  %14 = load i32* %k, align 4
  %conv30 = sext i32 %14 to i64
  %15 = load i32* %i16, align 4
  %idxprom31 = sext i32 %15 to i64
  %arrayidx32 = getelementptr inbounds [1005 x i64]* @a, i32 0, i64 %idxprom31
  %16 = load i64* %arrayidx32, align 8
  %cmp33 = icmp sle i64 %conv30, %16
  br i1 %cmp33, label %land.rhs34, label %land.end43

15
  %17 = load i32* %j, align 4
  %idxprom35 = sext i32 %17 to i64
  %18 = load i32* %i16, align 4
  %idxprom36 = sext i32 %18 to i64
  %arrayidx37 = getelementptr inbounds [1005 x [10005 x i64]]* @dp, i32 0, i64 %idxprom36
  %arrayidx38 = getelementptr inbounds [10005 x i64]* %arrayidx37, i32 0, i64 %idxprom35
  %19 = load i64* %arrayidx38, align 8
  %20 = load i32* %k, align 4
  %conv39 = sext i32 %20 to i64
  %21 = load i32* %i16, align 4
  %idxprom40 = sext i32 %21 to i64
  %arrayidx41 = getelementptr inbounds [1005 x i64]* @cost, i32 0, i64 %idxprom40
  %22 = load i64* %arrayidx41, align 8
  %mul = mul nsw i64 %conv39, %22
  %cmp42 = icmp sge i64 %19, %mul
  br label %land.end43

16
  %23 = phi i1 [ false, %for.cond29 ], [ %cmp42, %land.rhs34 ]
  br i1 %23, label %for.body44, label %for.end75

17
  %24 = load i32* %j, align 4
  %25 = load i32* %k, align 4
  %add = add nsw i32 %24, %25
  %idxprom45 = sext i32 %add to i64
  %26 = load i32* %i16, align 4
  %add46 = add nsw i32 %26, 1
  %idxprom47 = sext i32 %add46 to i64
  %arrayidx48 = getelementptr inbounds [1005 x [10005 x i64]]* @dp, i32 0, i64 %idxprom47
  %arrayidx49 = getelementptr inbounds [10005 x i64]* %arrayidx48, i32 0, i64 %idxprom45
  %27 = load i32* %j, align 4
  %idxprom50 = sext i32 %27 to i64
  %28 = load i32* %i16, align 4
  %idxprom51 = sext i32 %28 to i64
  %arrayidx52 = getelementptr inbounds [1005 x [10005 x i64]]* @dp, i32 0, i64 %idxprom51
  %arrayidx53 = getelementptr inbounds [10005 x i64]* %arrayidx52, i32 0, i64 %idxprom50
  %29 = load i64* %arrayidx53, align 8
  %30 = load i32* %k, align 4
  %conv54 = sext i32 %30 to i64
  %31 = load i32* %i16, align 4
  %idxprom55 = sext i32 %31 to i64
  %arrayidx56 = getelementptr inbounds [1005 x i64]* @cost, i32 0, i64 %idxprom55
  %32 = load i64* %arrayidx56, align 8
  %mul57 = mul nsw i64 %conv54, %32
  %sub = sub nsw i64 %29, %mul57
  %33 = load i64* @x, align 8
  %add58 = add nsw i64 %sub, %33
  store i64 %add58, i64* %ref.tmp59, align 8
  %34 = load i64* @initial, align 8
  %35 = load i32* %j, align 4
  %36 = load i32* %k, align 4
  %add60 = add nsw i32 %35, %36
  %conv61 = sext i32 %add60 to i64
  %37 = load i64* @cap_increase, align 8
  %mul62 = mul nsw i64 %conv61, %37
  %add63 = add nsw i64 %34, %mul62
  store i64 %add63, i64* %ref.tmp64, align 8
  %call65 = call i64* @_ZSt3minIxERKT_S2_S2_(i64* %ref.tmp59, i64* %ref.tmp64)
  %call66 = call i64* @_ZSt3maxIxERKT_S2_S2_(i64* %arrayidx49, i64* %call65)
  %38 = load i64* %call66
  %39 = load i32* %j, align 4
  %40 = load i32* %k, align 4
  %add67 = add nsw i32 %39, %40
  %idxprom68 = sext i32 %add67 to i64
  %41 = load i32* %i16, align 4
  %add69 = add nsw i32 %41, 1
  %idxprom70 = sext i32 %add69 to i64
  %arrayidx71 = getelementptr inbounds [1005 x [10005 x i64]]* @dp, i32 0, i64 %idxprom70
  %arrayidx72 = getelementptr inbounds [10005 x i64]* %arrayidx71, i32 0, i64 %idxprom68
  store i64 %38, i64* %arrayidx72, align 8
  %42 = load i32* %k, align 4
  %inc74 = add nsw i32 %42, 1
  store i32 %inc74, i32* %k, align 4
  br label %for.cond29

18
  %43 = load i32* %j, align 4
  %inc77 = add nsw i32 %43, 1
  store i32 %inc77, i32* %j, align 4
  br label %for.cond21

19
  %44 = load i32* %i16, align 4
  %inc80 = add nsw i32 %44, 1
  store i32 %inc80, i32* %i16, align 4
  br label %for.cond17

20
  store i64 0, i64* %j82, align 8
  br label %for.cond83

21
  %45 = load i64* %j82, align 8
  %cmp84 = icmp slt i64 %45, 10005
  br i1 %cmp84, label %for.body85, label %for.end92

22
  %46 = load i64* %j82, align 8
  %47 = load i64* @n, align 8
  %arrayidx86 = getelementptr inbounds [1005 x [10005 x i64]]* @dp, i32 0, i64 %47
  %arrayidx87 = getelementptr inbounds [10005 x i64]* %arrayidx86, i32 0, i64 %46
  %48 = load i64* %arrayidx87, align 8
  %cmp88 = icmp sge i64 %48, 0
  br i1 %cmp88, label %if.then, label %if.end

23
  %call89 = call i64* @_ZSt3maxIxERKT_S2_S2_(i64* @ans, i64* %j82)
  %49 = load i64* %call89
  store i64 %49, i64* @ans, align 8
  br label %if.end

24
  %50 = load i64* %j82, align 8
  %inc91 = add nsw i64 %50, 1
  store i64 %inc91, i64* %j82, align 8
  br label %for.cond83

25
  %51 = load i64* @ans, align 8
  %call93 = call %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"* @_ZSt4cout, i64 %51)
  %52 = load i32* %retval
  ret i32 %52
