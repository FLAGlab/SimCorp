
1
  %retval = alloca i32, align 4
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %n = alloca i64, align 8
  %W = alloca i64, align 8
  %B = alloca i64, align 8
  %X = alloca i64, align 8
  %i1 = alloca i64, align 8
  %ref.tmp = alloca i64, align 8
  %ref.tmp58 = alloca i64, align 8
  %ref.tmp64 = alloca i64, align 8
  store i32 0, i32* %retval
  %call = call zeroext i1 @_ZNSt8ios_base15sync_with_stdioEb(i1 zeroext false)
  %vtable = load i8** bitcast (%"class.std::basic_istream"* @_ZSt3cin to i8**)
  %vbase.offset.ptr = getelementptr i8* %vtable, i64 -24
  %0 = bitcast i8* %vbase.offset.ptr to i64*
  %vbase.offset = load i64* %0
  %add.ptr = getelementptr inbounds i8* bitcast (%"class.std::basic_istream"* @_ZSt3cin to i8*), i64 %vbase.offset
  %1 = bitcast i8* %add.ptr to %"class.std::basic_ios"*
  %call1 = call %"class.std::basic_ostream"* @_ZNSt9basic_iosIcSt11char_traitsIcEE3tieEPSo(%"class.std::basic_ios"* %1, %"class.std::basic_ostream"* null)
  %vtable2 = load i8** bitcast (%"class.std::basic_ostream"* @_ZSt4cout to i8**)
  %vbase.offset.ptr3 = getelementptr i8* %vtable2, i64 -24
  %2 = bitcast i8* %vbase.offset.ptr3 to i64*
  %vbase.offset4 = load i64* %2
  %add.ptr5 = getelementptr inbounds i8* bitcast (%"class.std::basic_ostream"* @_ZSt4cout to i8*), i64 %vbase.offset4
  %3 = bitcast i8* %add.ptr5 to %"class.std::basic_ios"*
  %call6 = call %"class.std::basic_ostream"* @_ZNSt9basic_iosIcSt11char_traitsIcEE3tieEPSo(%"class.std::basic_ios"* %3, %"class.std::basic_ostream"* null)
  %call7 = call %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* @_ZSt3cin, i64* %n)
  %call8 = call %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* %call7, i64* %W)
  %call9 = call %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* %call8, i64* %B)
  %call10 = call %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* %call9, i64* %X)
  store i64 1, i64* %i, align 8
  br label %for.cond

2
  %4 = load i64* %i, align 8
  %5 = load i64* %n, align 8
  %cmp = icmp sle i64 %4, %5
  br i1 %cmp, label %for.body, label %for.end

3
  %6 = load i64* %i, align 8
  %arrayidx = getelementptr inbounds [1002 x i64]* @c, i32 0, i64 %6
  %call11 = call %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* @_ZSt3cin, i64* %arrayidx)
  %7 = load i64* %i, align 8
  %inc = add nsw i64 %7, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

4
  store i64 1, i64* %i, align 8
  br label %for.cond12

5
  %8 = load i64* %i, align 8
  %9 = load i64* %n, align 8
  %cmp13 = icmp sle i64 %8, %9
  br i1 %cmp13, label %for.body14, label %for.end19

6
  %10 = load i64* %i, align 8
  %arrayidx15 = getelementptr inbounds [1002 x i64]* @cost, i32 0, i64 %10
  %call16 = call %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* @_ZSt3cin, i64* %arrayidx15)
  %11 = load i64* %i, align 8
  %inc18 = add nsw i64 %11, 1
  store i64 %inc18, i64* %i, align 8
  br label %for.cond12

7
  store i64 1, i64* %i, align 8
  br label %for.cond20

8
  %12 = load i64* %i, align 8
  %13 = load i64* %n, align 8
  %add = add nsw i64 %13, 1
  %cmp21 = icmp sle i64 %12, %add
  br i1 %cmp21, label %for.body22, label %for.end33

9
  store i64 0, i64* %j, align 8
  br label %for.cond23

10
  %14 = load i64* %j, align 8
  %conv = sitofp i64 %14 to double
  %cmp24 = fcmp ole double %conv, 1.000000e+04
  br i1 %cmp24, label %for.body25, label %for.end30

11
  %15 = load i64* %j, align 8
  %16 = load i64* %i, align 8
  %arrayidx26 = getelementptr inbounds [1002 x [10002 x i64]]* @dp, i32 0, i64 %16
  %arrayidx27 = getelementptr inbounds [10002 x i64]* %arrayidx26, i32 0, i64 %15
  store i64 -1, i64* %arrayidx27, align 8
  %17 = load i64* %j, align 8
  %inc29 = add nsw i64 %17, 1
  store i64 %inc29, i64* %j, align 8
  br label %for.cond23

12
  %18 = load i64* %i, align 8
  %inc32 = add nsw i64 %18, 1
  store i64 %inc32, i64* %i, align 8
  br label %for.cond20

13
  %19 = load i64* %W, align 8
  store i64 %19, i64* getelementptr inbounds ([1002 x [10002 x i64]]* @dp, i32 0, i64 1, i64 0), align 8
  store i64 1, i64* %i, align 8
  br label %for.cond34

14
  %20 = load i64* %i, align 8
  %21 = load i64* %n, align 8
  %cmp35 = icmp sle i64 %20, %21
  br i1 %cmp35, label %for.body36, label %for.end79

15
  store i64 0, i64* %j, align 8
  br label %for.cond37

16
  %22 = load i64* %j, align 8
  %conv38 = sitofp i64 %22 to double
  %cmp39 = fcmp ole double %conv38, 1.000000e+04
  br i1 %cmp39, label %for.body40, label %for.end76

17
  %23 = load i64* %j, align 8
  %24 = load i64* %i, align 8
  %arrayidx41 = getelementptr inbounds [1002 x [10002 x i64]]* @dp, i32 0, i64 %24
  %arrayidx42 = getelementptr inbounds [10002 x i64]* %arrayidx41, i32 0, i64 %23
  %25 = load i64* %arrayidx42, align 8
  %cmp43 = icmp ne i64 %25, -1
  br i1 %cmp43, label %if.then, label %if.end

18
  store i64 0, i64* %i1, align 8
  br label %for.cond44

19
  %26 = load i64* %i1, align 8
  %27 = load i64* %i, align 8
  %arrayidx45 = getelementptr inbounds [1002 x i64]* @c, i32 0, i64 %27
  %28 = load i64* %j, align 8
  %29 = load i64* %i, align 8
  %arrayidx46 = getelementptr inbounds [1002 x [10002 x i64]]* @dp, i32 0, i64 %29
  %arrayidx47 = getelementptr inbounds [10002 x i64]* %arrayidx46, i32 0, i64 %28
  %30 = load i64* %arrayidx47, align 8
  %31 = load i64* %i, align 8
  %arrayidx48 = getelementptr inbounds [1002 x i64]* @cost, i32 0, i64 %31
  %32 = load i64* %arrayidx48, align 8
  %div = sdiv i64 %30, %32
  store i64 %div, i64* %ref.tmp, align 8
  %call49 = call i64* @_ZSt3minIxERKT_S2_S2_(i64* %arrayidx45, i64* %ref.tmp)
  %33 = load i64* %call49
  %cmp50 = icmp sle i64 %26, %33
  br i1 %cmp50, label %for.body51, label %for.end73

20
  %34 = load i64* %j, align 8
  %35 = load i64* %i1, align 8
  %add52 = add nsw i64 %34, %35
  %36 = load i64* %i, align 8
  %add53 = add nsw i64 %36, 1
  %arrayidx54 = getelementptr inbounds [1002 x [10002 x i64]]* @dp, i32 0, i64 %add53
  %arrayidx55 = getelementptr inbounds [10002 x i64]* %arrayidx54, i32 0, i64 %add52
  %37 = load i64* %W, align 8
  %38 = load i64* %B, align 8
  %39 = load i64* %j, align 8
  %40 = load i64* %i1, align 8
  %add56 = add nsw i64 %39, %40
  %mul = mul nsw i64 %38, %add56
  %add57 = add nsw i64 %37, %mul
  store i64 %add57, i64* %ref.tmp58, align 8
  %41 = load i64* %j, align 8
  %42 = load i64* %i, align 8
  %arrayidx59 = getelementptr inbounds [1002 x [10002 x i64]]* @dp, i32 0, i64 %42
  %arrayidx60 = getelementptr inbounds [10002 x i64]* %arrayidx59, i32 0, i64 %41
  %43 = load i64* %arrayidx60, align 8
  %44 = load i64* %i1, align 8
  %45 = load i64* %i, align 8
  %arrayidx61 = getelementptr inbounds [1002 x i64]* @cost, i32 0, i64 %45
  %46 = load i64* %arrayidx61, align 8
  %mul62 = mul nsw i64 %44, %46
  %sub = sub nsw i64 %43, %mul62
  %47 = load i64* %X, align 8
  %add63 = add nsw i64 %sub, %47
  store i64 %add63, i64* %ref.tmp64, align 8
  %call65 = call i64* @_ZSt3minIxERKT_S2_S2_(i64* %ref.tmp58, i64* %ref.tmp64)
  %call66 = call i64* @_ZSt3maxIxERKT_S2_S2_(i64* %arrayidx55, i64* %call65)
  %48 = load i64* %call66
  %49 = load i64* %j, align 8
  %50 = load i64* %i1, align 8
  %add67 = add nsw i64 %49, %50
  %51 = load i64* %i, align 8
  %add68 = add nsw i64 %51, 1
  %arrayidx69 = getelementptr inbounds [1002 x [10002 x i64]]* @dp, i32 0, i64 %add68
  %arrayidx70 = getelementptr inbounds [10002 x i64]* %arrayidx69, i32 0, i64 %add67
  store i64 %48, i64* %arrayidx70, align 8
  %52 = load i64* %i1, align 8
  %inc72 = add nsw i64 %52, 1
  store i64 %inc72, i64* %i1, align 8
  br label %for.cond44

21
  br label %if.end

22
  %53 = load i64* %j, align 8
  %inc75 = add nsw i64 %53, 1
  store i64 %inc75, i64* %j, align 8
  br label %for.cond37

23
  %54 = load i64* %i, align 8
  %inc78 = add nsw i64 %54, 1
  store i64 %inc78, i64* %i, align 8
  br label %for.cond34

24
  store i64 10000, i64* %j, align 8
  br label %while.cond

25
  %55 = load i64* %j, align 8
  %56 = load i64* %n, align 8
  %add80 = add nsw i64 %56, 1
  %arrayidx81 = getelementptr inbounds [1002 x [10002 x i64]]* @dp, i32 0, i64 %add80
  %arrayidx82 = getelementptr inbounds [10002 x i64]* %arrayidx81, i32 0, i64 %55
  %57 = load i64* %arrayidx82, align 8
  %cmp83 = icmp eq i64 %57, -1
  br i1 %cmp83, label %while.body, label %while.end

26
  %58 = load i64* %j, align 8
  %dec = add nsw i64 %58, -1
  store i64 %dec, i64* %j, align 8
  br label %while.cond

27
  %59 = load i64* %j, align 8
  %call84 = call %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"* @_ZSt4cout, i64 %59)
  %60 = load i32* %retval
  ret i32 %60
