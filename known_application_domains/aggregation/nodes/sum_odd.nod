
1
  %retval = alloca i32, align 4
  %a = alloca [5 x i32], align 16
  %n = alloca i32, align 4
  %ans = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval
  %0 = bitcast [5 x i32]* %a to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* bitcast ([5 x i32]* @_ZZ4mainE1a to i8*), i64 20, i32 16, i1 false)
  store i32 5, i32* %n, align 4
  store i32 0, i32* %ans, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

2
  %1 = load i32* %i, align 4
  %2 = load i32* %n, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

3
  %3 = load i32* %i, align 4
  %idxprom = sext i32 %3 to i64
  %arrayidx = getelementptr inbounds [5 x i32]* %a, i32 0, i64 %idxprom
  %4 = load i32* %arrayidx, align 4
  %rem = srem i32 %4, 2
  %cmp1 = icmp ne i32 %rem, 0
  br i1 %cmp1, label %if.then, label %if.end

4
  %5 = load i32* %i, align 4
  %idxprom2 = sext i32 %5 to i64
  %arrayidx3 = getelementptr inbounds [5 x i32]* %a, i32 0, i64 %idxprom2
  %6 = load i32* %arrayidx3, align 4
  %7 = load i32* %ans, align 4
  %add = add nsw i32 %7, %6
  store i32 %add, i32* %ans, align 4
  br label %if.end

5
  %8 = load i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

6
  ret i32 0
