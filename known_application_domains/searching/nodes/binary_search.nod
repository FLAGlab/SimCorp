
1
  %retval = alloca i32, align 4
  %a = alloca [5 x i32], align 16
  %k = alloca i32, align 4
  %n = alloca i32, align 4
  %lo = alloca i32, align 4
  %hi = alloca i32, align 4
  %ans = alloca i32, align 4
  %mid = alloca i32, align 4
  store i32 0, i32* %retval
  %0 = bitcast [5 x i32]* %a to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* bitcast ([5 x i32]* @_ZZ4mainE1a to i8*), i64 20, i32 16, i1 false)
  store i32 4, i32* %k, align 4
  store i32 5, i32* %n, align 4
  store i32 0, i32* %lo, align 4
  %1 = load i32* %n, align 4
  %sub = sub nsw i32 %1, 1
  store i32 %sub, i32* %hi, align 4
  store i32 -1, i32* %ans, align 4
  br label %while.cond

2
  %2 = load i32* %lo, align 4
  %3 = load i32* %hi, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %while.body, label %while.end

3
  %4 = load i32* %lo, align 4
  %5 = load i32* %hi, align 4
  %add = add nsw i32 %4, %5
  %div = sdiv i32 %add, 2
  store i32 %div, i32* %mid, align 4
  %6 = load i32* %k, align 4
  %7 = load i32* %mid, align 4
  %idxprom = sext i32 %7 to i64
  %arrayidx = getelementptr inbounds [5 x i32]* %a, i32 0, i64 %idxprom
  %8 = load i32* %arrayidx, align 4
  %cmp1 = icmp sle i32 %6, %8
  br i1 %cmp1, label %if.then, label %if.else

4
  %9 = load i32* %mid, align 4
  store i32 %9, i32* %hi, align 4
  br label %if.end

5
  %10 = load i32* %mid, align 4
  %add2 = add nsw i32 %10, 1
  store i32 %add2, i32* %lo, align 4
  br label %if.end

6
  br label %while.cond

7
  %11 = load i32* %lo, align 4
  %idxprom3 = sext i32 %11 to i64
  %arrayidx4 = getelementptr inbounds [5 x i32]* %a, i32 0, i64 %idxprom3
  %12 = load i32* %arrayidx4, align 4
  %13 = load i32* %k, align 4
  %cmp5 = icmp eq i32 %12, %13
  br i1 %cmp5, label %if.then6, label %if.end7

8
  %14 = load i32* %lo, align 4
  store i32 %14, i32* %ans, align 4
  br label %if.end7

9
  ret i32 0
